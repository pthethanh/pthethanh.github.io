{
  "version": "https://jsonfeed.org/version/1",
  "title": "The Fortune Days",
  "home_page_url": "https://thefortunedays.com",
  "feed_url": "https://thefortunedays.com/feed/feed.json",
  "description": "It&#39;s a good time",
  "author": {
    "name": "Thanh",
    "url": ""
  },
  "items": [{
      "id": "https://thefortunedays.com/articles/golang-generic-parameter-type-assertion/",
      "url": "https://thefortunedays.com/articles/golang-generic-parameter-type-assertion/",
      "title": "Generic Parameter Type Assertion",
      "content_html": "<p>Dynamic type assertion on generic parameter type is not possible at runtime, but there's a trick to do it by converting the value to <code>any</code> and do the normal type assertion. This means <code>T.(type)</code> is not possible, but <code>any(T).(type)</code> is possible:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> checkMe<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>t T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">switch</span> <span class=\"token function\">any</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[]byte\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/nKK94P2LFfC\">Playground</a></p>\n<p>Although this tricks work well, but it is considered as unsafe since checking type at runtime could be very error-prone.</p>\n",
      "date_published": "2024-09-15T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-multi-modules-repository/",
      "url": "https://thefortunedays.com/articles/go-multi-modules-repository/",
      "title": "Versioning Go Modules",
      "content_html": "<p>Let assume you want to organize multiple modules in a single Github repository like the case below and would like to version them separately.<br>\nAs an example, the <a href=\"https://github.com/pthethanh/nano\">nano</a> project includes different modules: the <code>nano</code> itself and other sub-modules <code>protoc-gen-nano</code>, <code>kafka</code>, <code>cache</code>.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">https://github.com/pthethanh/nano<br>├ <span class=\"token punctuation\">..</span>.<br>├── cmd<br>│   └── protoc-gen-nano<br>│       ├── go.mod<br>│       ├── go.sum<br>├── plugins<br>│   ├── broker<br>│   │   ├── kafka<br>│   │   │   ├── go.mod<br>│   │   │   ├── go.sum<br>│   │   └── nats<br>│   │       ├── go.mod<br>│   │       ├── go.sum<br>│   └── cache<br>│       └── ristretto<br>│           ├── go.mod<br>│           ├── go.sum<br>├── go.mod<br>├── go.sum<br>├── go.work<br>├── go.work.sum</code></pre>\n<p>With the structure above, how can you release a different versions for each modules? Let say <code>nano</code> at v0.0.1, <code>kafka</code> at v0.0.2 and so on?</p>\n<p>Thanks to Go &amp; Github, they support a very simple way to tag/release a version for each module base on their path on github repo. Basically, all you ned to do is to tag a module with the following format:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> tag <span class=\"token operator\">&lt;</span>relative path module from the root dir<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>version<span class=\"token operator\">></span></code></pre>\n<p>This means I can release each module at different version like below:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">// <span class=\"token function\">nano</span> at v0.0.1<br><span class=\"token function\">git</span> tag -a v0.0.1 -m <span class=\"token string\">\"Release version v.0.1\"</span><br><span class=\"token function\">git</span> push origin v0.0.1<br><br>// gen <span class=\"token function\">nano</span> at v0.0.2<br><span class=\"token function\">git</span> tag -a cmd/protoc-gen-nano/v0.0.2  -m <span class=\"token string\">\"Release version v.0.2\"</span><br><span class=\"token function\">git</span> push origin cmd/protoc-gen-nano/v0.0.2<br><br>// kafka at v0.0.3<br><span class=\"token function\">git</span> tag -a plugins/broker/kafka/v0.0.3  -m <span class=\"token string\">\"Release version v.0.3\"</span><br><span class=\"token function\">git</span> push origin plugins/broker/kafka/v0.0.3<br><br>// nats at v0.0.2<br><span class=\"token function\">git</span> tag -a plugins/broker/nats/v0.0.2  -m <span class=\"token string\">\"Release version v.0.2\"</span><br><span class=\"token function\">git</span> push origin plugins/broker/nats/v0.0.2</code></pre>\n<p>Once tagging &amp; releasing done, you can use them in other modules normally:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">require <span class=\"token punctuation\">(</span><br>\tgithub.com/pthethanh/nano v0.0.1<br>\tgithub.com/pthethanh/nano/plugins/broker/kafka v0.0.3<br><span class=\"token punctuation\">)</span></code></pre>\n<p>That's all! Happy coding!</p>\n",
      "date_published": "2024-08-25T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/getting-started-with-apache-spark/",
      "url": "https://thefortunedays.com/articles/getting-started-with-apache-spark/",
      "title": "Getting Started With Apache Spark",
      "content_html": "<p>This blog post is a summary of my presentation on Apache Spark Overview with a basic Kafka streaming application. It includes some basic steps to create and deploy a simple Spark application. This is not a comprehensive tutorial, so for more information, please visit the Apache Spark <a href=\"https://spark.apache.org/docs/latest/\">website</a>.</p>\n<h2 id=\"prerequisite\">Prerequisite <a class=\"direct-link\" href=\"#prerequisite\">#</a></h2>\n<ul>\n<li><a href=\"https://www.docker.com/\">Docker</a></li>\n<li><a href=\"https://minikube.sigs.k8s.io/docs/\">Minikube</a></li>\n</ul>\n<h2 id=\"apache-spark-overview\">Apache Spark Overview <a class=\"direct-link\" href=\"#apache-spark-overview\">#</a></h2>\n<p><img src=\"/img/remote/articles/getting-started-with-apache-spark/apache-spark-overview.jpg\" alt=\"Introduction to Apache Spark\"></p>\n<h2 id=\"build-spark-application\">Build Spark Application <a class=\"direct-link\" href=\"#build-spark-application\">#</a></h2>\n<p><code>Main.scala</code></p>\n<pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>SparkSession<br><br><br><br><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span>SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello-spark\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">import</span> <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_<br>    <span class=\"token keyword\">val</span> kafkaOpts <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><br>      <span class=\"token string\">\"kafka.bootstrap.servers\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"kafka:9092\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"subscribe\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.sasl.mechanism\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"PLAIN\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.security.protocol\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"SASL_PLAINTEXT\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.sasl.jaas.config\"</span><span class=\"token operator\">-></span> <span class=\"token triple-quoted-string string\">\"\"\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user1\" password=\"kk3gaqZRly\";\"\"\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">val</span> df <span class=\"token operator\">=</span> spark<br>      <span class=\"token punctuation\">.</span>readStream<br>      <span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"kafka\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span>kafkaOpts<span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">val</span> ds <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>selectExpr<span class=\"token punctuation\">(</span><span class=\"token string\">\"CAST(key AS STRING)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CAST(value AS STRING)\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br><br>    ds<span class=\"token punctuation\">.</span>writeStream<br>      <span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>outputMode<span class=\"token punctuation\">(</span><span class=\"token string\">\"append\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token comment\">//.trigger(Trigger.Continuous(1))</span><br>      <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Note that in the above code we put the user/password of Kafka directly in the code which is just for simplicity &amp; testing purpose. For production please store them in Vault or Secret instead.</p>\n<p><code>build.sbt</code></p>\n<pre class=\"language-shell\"><code class=\"language-shell\">ThisBuild / version :<span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0-SNAPSHOT\"</span><br><br>ThisBuild / scalaVersion :<span class=\"token operator\">=</span> <span class=\"token string\">\"2.12.18\"</span><br><br>libraryDependencies <span class=\"token operator\">+=</span> <span class=\"token string\">\"org.apache.spark\"</span> %% <span class=\"token string\">\"spark-core\"</span> % <span class=\"token string\">\"3.5.1\"</span><br>libraryDependencies <span class=\"token operator\">+=</span> <span class=\"token string\">\"org.apache.spark\"</span> %% <span class=\"token string\">\"spark-sql\"</span> % <span class=\"token string\">\"3.5.1\"</span><br>libraryDependencies <span class=\"token operator\">+=</span> <span class=\"token string\">\"org.apache.spark\"</span> %% <span class=\"token string\">\"spark-sql-kafka-0-10\"</span> % <span class=\"token string\">\"3.5.1\"</span> % Test<br><br>Compile / run / mainClass :<span class=\"token operator\">=</span> Some<span class=\"token punctuation\">(</span><span class=\"token string\">\"Main\"</span><span class=\"token punctuation\">)</span><br><br>lazy val root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>project <span class=\"token keyword\">in</span> file<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">))</span><br>  .settings<span class=\"token punctuation\">(</span><br>    name :<span class=\"token operator\">=</span> <span class=\"token string\">\"hello-spark\"</span><br>  <span class=\"token punctuation\">)</span><br></code></pre>\n<p><code>Dockerfile</code></p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> SCALA_VERSION=2.12</span><br><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> ARG_JAR_NAME=hello-spark_2.12-0.1.0-SNAPSHOT.jar</span><br><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> ARG_MAIN_CLASS=Main</span><br><br><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> sbtscala/scala-sbt:graalvm-ce-22.3.3-b1-java17_1.9.9_2.12.18 <span class=\"token keyword\">as</span> build</span><br><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span><br><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span><br><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sbt package</span><br><br><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> apache/spark:3.5.1-scala2.12-java17-ubuntu</span><br><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> ARG_JAR_NAME</span><br><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> ARG_MAIN_CLASS</span><br><span class=\"token instruction\"><span class=\"token keyword\">ARG</span> SCALA_VERSION</span><br><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">build</span></span> /app/target/scala-<span class=\"token variable\">${SCALA_VERSION}</span>/<span class=\"token variable\">${ARG_JAR_NAME}</span> /app/work/application.jar</span></code></pre>\n<p>Build application Docker image</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>minikube -p minikube docker-env<span class=\"token variable\">)</span></span><br><span class=\"token function\">docker</span> build -t hello-spark:latest <span class=\"token builtin class-name\">.</span></code></pre>\n<h2 id=\"deploy-kafka\">Deploy Kafka <a class=\"direct-link\" href=\"#deploy-kafka\">#</a></h2>\n<pre class=\"language-shell\"><code class=\"language-shell\">helm <span class=\"token function\">install</span> kafka oci://registry-1.docker.io/bitnamicharts/kafka</code></pre>\n<p>Notice the notes after you installed Kafka, it includes information for authenticate with Kafka cluster. Otherwise you can check the <code>server.properties</code>:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl <span class=\"token builtin class-name\">exec</span> kafka-controller-0 -- <span class=\"token function\">cat</span> /opt/bitnami/kafka/config/server.properties</code></pre>\n<p>Let run Kafka-client to create topic and test our Kafka cluster.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl run kafka-client --rm -ti --image bitnami/kafka:3.6.1-debian-12-r12 -- <span class=\"token function\">bash</span><br><span class=\"token builtin class-name\">cd</span> /opt/bitnami/kafka/bin<br><br><span class=\"token function\">cat</span> <span class=\"token operator\">>></span> client.conf <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<br>security.protocol=SASL_PLAINTEXT<br>sasl.mechanism=PLAIN<br>sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"user1\" password=\"kk3gaqZRly\";<br>EOF</span><br><br>kafka-topics.sh --create --topic <span class=\"token builtin class-name\">test</span> --bootstrap-server kafka:9092 --command-config client.conf<br><br>kafka-console-producer.sh --topic <span class=\"token builtin class-name\">test</span> --request-required-acks all --bootstrap-server kafka:9092 --producer.config client.conf<br><br>kafka-console-consumer.sh --topic <span class=\"token builtin class-name\">test</span> --bootstrap-server kafka:9092 --consumer.config client.conf<br></code></pre>\n<h2 id=\"deployment\">Deployment <a class=\"direct-link\" href=\"#deployment\">#</a></h2>\n<p>Deploy Spark application to Kubernetes cluster require a ServiceAccount, hence we need to create it first:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl create serviceaccount sparksubmit<br>kubectl create clusterrolebinding sparksubmit-role --clusterrole<span class=\"token operator\">=</span>edit --serviceaccount<span class=\"token operator\">=</span>default:sparksubmit --namespace<span class=\"token operator\">=</span>default</code></pre>\n<p>Deploy a Spark application to Kubernetes can be done by 2 ways:</p>\n<ul>\n<li>Using spark-submit</li>\n<li>Using Spark-operator</li>\n</ul>\n<h3 id=\"deploy-using-spark-submit\">Deploy using spark-submit <a class=\"direct-link\" href=\"#deploy-using-spark-submit\">#</a></h3>\n<p>In this deployment mode, we submit the application using <code>spark-submit</code> from outside of the Kubernetes cluster. To install the spark-submit, you can download and setup the Apache Spark on your machine or pipeline:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://www.apache.org/dyn/closer.lua/spark/spark-3.5.1/spark-3.5.1-bin-hadoop3.tgz<br><span class=\"token function\">tar</span> -xzf spark-3.5.1-bin-hadoop3.tgz -C ~/bin<br><br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:~/bin/spark-3.5.1-bin-hadoop3<br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:~/bin/spark-3.5.1-bin-hadoop3/bin<br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SPARK_HOME</span><span class=\"token operator\">=~</span>/bin/spark-3.5.1-bin-hadoop3<br><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_HOME</span><span class=\"token operator\">=~</span>/bin/spark-3.5.1-bin-hadoop3</code></pre>\n<p>Note that for testing the Spark application locally, you also must install Java (17) and Scala (2.12) on your local machine.</p>\n<p>After installed <code>spark-submit</code>, go ahead to submit the Spark application:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">spark-submit <span class=\"token punctuation\">\\</span><br>--master k8s://https://127.0.0.1:32769 <span class=\"token punctuation\">\\</span><br>--deploy-mode cluster <span class=\"token punctuation\">\\</span><br>--name hello-spark <span class=\"token punctuation\">\\</span><br>--class Main <span class=\"token punctuation\">\\</span><br>--conf spark.kubernetes.namespace<span class=\"token operator\">=</span>default <span class=\"token punctuation\">\\</span><br>--conf spark.kubernetes.container.image<span class=\"token operator\">=</span>hello-spark:latest <span class=\"token punctuation\">\\</span><br>--packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1 <span class=\"token punctuation\">\\</span><br>--conf spark.driver.extraJavaOptions<span class=\"token operator\">=</span><span class=\"token string\">\"-Divy.cache.dir=/tmp -Divy.home=/tmp\"</span> <span class=\"token punctuation\">\\</span><br>--conf spark.kubernetes.authenticate.driver.serviceAccountName<span class=\"token operator\">=</span>sparksubmit <span class=\"token punctuation\">\\</span><br>--conf spark.kubernetes.authenticate.submission.caCertFile<span class=\"token operator\">=~</span>/.minikube/ca.crt <span class=\"token punctuation\">\\</span><br>local:///app/work/application.jar</code></pre>\n<p>Notes:</p>\n<ul>\n<li>Run <code>kubectl cluster-info</code> to get the URL of your K8S cluster.</li>\n<li>Replace the <code>caCertFile</code> to your certificate file. If relative path doesn't work, change to absolute path.</li>\n</ul>\n<p>After deployed, you would see the driver and executors got deployed in your K8S:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl get pod<br>NAME                                  READY   STATUS    RESTARTS      AGE<br>hello-spark-3605288e2b93f981-exec-1   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             10s<br>hello-spark-3605288e2b93f981-exec-2   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             10s<br>hello-spark-6da76b8e2b92dd56-driver   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             82s<br>kafka-controller-0                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>12m ago<span class=\"token punctuation\">)</span>   14h<br>kafka-controller-1                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>12m ago<span class=\"token punctuation\">)</span>   14h<br>kafka-controller-2                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>12m ago<span class=\"token punctuation\">)</span>   14h</code></pre>\n<p>Once the driver and the executors are up and running, you can start the Spark UI to see the application detail as well as start sending some events to Kafka and check for the output from log of the driver.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl port-forward hello-spark-6da76b8e2b92dd56-driver <span class=\"token number\">4040</span>:4040</code></pre>\n<p>If you would like to kill the application, just run spark-submit with <code>-kill</code> option:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">spark-submit --kill hello-spark-d5358c8e1cd2e8b0-driver --master k8s://https://127.0.0.1:32769</code></pre>\n<h3 id=\"deploy-using-spark-operator\">Deploy using Spark-Operator <a class=\"direct-link\" href=\"#deploy-using-spark-operator\">#</a></h3>\n<p>Deploy Spark application using Spark operator is recommended for production. In this deployment model, we will install <code>spark-operator</code> inside K8S cluster, spark-operator will listen on any application deployed to the K8S with application kind as <code>SparkApplication</code> and will help us to submit Spark application to the K8S for us.</p>\n<p>You can read more detail on using spark-operator at their <a href=\"https://github.com/kubeflow/spark-operator/blob/master/docs/quick-start-guide.md\">user-guide</a></p>\n<p>Install spark-operator:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">helm repo <span class=\"token function\">add</span> spark-operator https://kubeflow.github.io/spark-operator<br>helm <span class=\"token function\">install</span> spark-operator spark-operator/spark-operator --namespace spark-operator --create-namespace --set <span class=\"token assign-left variable\">enableWebhook</span><span class=\"token operator\">=</span>true</code></pre>\n<p>Note that the option <code>--set enableWebhook=true</code> must be enabled if you would like to use some certain Spark operator features such as setting <code>env</code> or GPU for driver and executor. See more <a href=\"https://github.com/kubeflow/spark-operator/blob/master/docs/quick-start-guide.md#mutating-admission-webhooks-on-a-private-gke-or-eks-cluster\">here</a></p>\n<p>Check for the deployment status:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl get pod -n spark-operator<br>NAME                              READY   STATUS    RESTARTS      AGE<br>spark-operator-675d97df85-c2b9g   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>46m ago<span class=\"token punctuation\">)</span>   14h</code></pre>\n<p>Create application deployment file <code>spark-application.yaml</code></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> sparkoperator.k8s.io/v1beta2<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> SparkApplication<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>spark<br>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Scala<br>  <span class=\"token key atrule\">sparkVersion</span><span class=\"token punctuation\">:</span> 3.5.1<br>  <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> cluster<br>  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>spark<span class=\"token punctuation\">:</span>latest<br>  <span class=\"token key atrule\">mainClass</span><span class=\"token punctuation\">:</span> Main<br>  <span class=\"token key atrule\">mainApplicationFile</span><span class=\"token punctuation\">:</span> local<span class=\"token punctuation\">:</span>///app/work/application.jar<br>  <span class=\"token key atrule\">deps</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> org.apache.spark<span class=\"token punctuation\">:</span>spark<span class=\"token punctuation\">-</span>sql<span class=\"token punctuation\">-</span>kafka<span class=\"token punctuation\">-</span>0<span class=\"token punctuation\">-</span>10_2.12<span class=\"token punctuation\">:</span>3.5.1<br>  <span class=\"token key atrule\">sparkConf</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">\"spark.driver.extraJavaOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-Divy.cache.dir=/tmp -Divy.home=/tmp\"</span><br>  <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 512m<br>    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> 3.5.1<br>    <span class=\"token key atrule\">serviceAccount</span><span class=\"token punctuation\">:</span> sparksubmit<br>  <span class=\"token key atrule\">executor</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 512m<br>    <span class=\"token key atrule\">instances</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><br>    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> 3.5.1</code></pre>\n<p>Deploy it to the cluster</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl apply -f spark-application.yaml</code></pre>\n<p>Wait for sometime for spark-operator to detect and submit the application and then you can start testing the application:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">kubectl get pod<br>NAME                                  READY   STATUS    RESTARTS      AGE<br>hello-spark-driver                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             54s<br>hello-spark-efd4f18e2bb34946-exec-1   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             4s<br>hello-spark-efd4f18e2bb34946-exec-2   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             4s<br>hello-spark-efd4f18e2bb34946-exec-3   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>             4s<br>kafka-controller-0                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>46m ago<span class=\"token punctuation\">)</span>   14h<br>kafka-controller-1                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>46m ago<span class=\"token punctuation\">)</span>   14h<br>kafka-controller-2                    <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>46m ago<span class=\"token punctuation\">)</span>   14h</code></pre>\n<p>At this step, we've done for the very basic Spark application from development to deployment. But as mentioned earlier, we should not put username and password directly in the code but should store them in Vault or Secret. By applying spark-operator, we can easily do this using <code>env</code> config of the operator(but remember to enable option <code>enableWebhook=true</code> when installing spark-operator)</p>\n<p>Let update the code and the deployment file as below:</p>\n<p><code>Main.scala</code></p>\n<pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>SparkSession<br><br><br><br><span class=\"token keyword\">object</span> Main <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> spark<span class=\"token operator\">:</span>SparkSession <span class=\"token operator\">=</span> SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello-spark\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">import</span> <span class=\"token namespace\">spark<span class=\"token punctuation\">.</span>implicits<span class=\"token punctuation\">.</span></span>_<br>    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token string\">\"KAFKA_USER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">val</span> pass <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token string\">\"KAFKA_PASS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">val</span> kafkaOpts <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><br>      <span class=\"token string\">\"kafka.bootstrap.servers\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"kafka:9092\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"subscribe\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.sasl.mechanism\"</span><span class=\"token operator\">-></span> <span class=\"token string\">\"PLAIN\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.security.protocol\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"SASL_PLAINTEXT\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"kafka.sasl.jaas.config\"</span><span class=\"token operator\">-></span> <span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"\"\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">user</span></span><span class=\"token string\">\" password=\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">pass</span></span><span class=\"token string\">\";\"\"\"</span></span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">val</span> df <span class=\"token operator\">=</span> spark<br>      <span class=\"token punctuation\">.</span>readStream<br>      <span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"kafka\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span>kafkaOpts<span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">val</span> ds <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>selectExpr<span class=\"token punctuation\">(</span><span class=\"token string\">\"CAST(key AS STRING)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CAST(value AS STRING)\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>as<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br><br>    ds<span class=\"token punctuation\">.</span>writeStream<br>      <span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>outputMode<span class=\"token punctuation\">(</span><span class=\"token string\">\"append\"</span><span class=\"token punctuation\">)</span><br>      <span class=\"token comment\">//.trigger(Trigger.Continuous(1))</span><br>      <span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span>awaitTermination<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>spark-application.yaml</code></p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> sparkoperator.k8s.io/v1beta2<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> SparkApplication<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>spark<br>  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Scala<br>  <span class=\"token key atrule\">sparkVersion</span><span class=\"token punctuation\">:</span> 3.5.1<br>  <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> cluster<br>  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>spark<span class=\"token punctuation\">:</span>latest<br>  <span class=\"token key atrule\">mainClass</span><span class=\"token punctuation\">:</span> Main<br>  <span class=\"token key atrule\">mainApplicationFile</span><span class=\"token punctuation\">:</span> local<span class=\"token punctuation\">:</span>///app/work/application.jar<br>  <span class=\"token key atrule\">deps</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> org.apache.spark<span class=\"token punctuation\">:</span>spark<span class=\"token punctuation\">-</span>sql<span class=\"token punctuation\">-</span>kafka<span class=\"token punctuation\">-</span>0<span class=\"token punctuation\">-</span>10_2.12<span class=\"token punctuation\">:</span>3.5.1<br>  <span class=\"token key atrule\">sparkConf</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">\"spark.driver.extraJavaOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-Divy.cache.dir=/tmp -Divy.home=/tmp\"</span><br>  <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 512m<br>    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> 3.5.1<br>    <span class=\"token key atrule\">serviceAccount</span><span class=\"token punctuation\">:</span> sparksubmit<br>    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> KAFKA_USER<br>        <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user1\"</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> KAFKA_PASS<br>        <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">secretKeyRef</span><span class=\"token punctuation\">:</span><br>            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kafka<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>passwords<br>            <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> client<span class=\"token punctuation\">-</span>passwords<br>  <span class=\"token key atrule\">executor</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 512m<br>    <span class=\"token key atrule\">instances</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><br>    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> 3.5.1</code></pre>\n<p>Note that the secret <code>kafka-user-passwords</code> is the secret that created by <code>Binami</code> Kafka helm chart above. If you use another type of chart please double check the name or you can also create a secret yourself and update the deployment file accordingly.</p>\n",
      "date_published": "2024-03-10T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-cancellable-functions/",
      "url": "https://thefortunedays.com/articles/go-cancellable-functions/",
      "title": "Cancellable Functions",
      "content_html": "<p><strong>Summary</strong>: A combination of channel and Context is a very powerful tool for cancellable functions.</p>\n<p>There are multiple use cases that we might want to create a cancellable function, especially when developing concurrent programs. We might perform some tasks and if they take too long to complete, we just go ahead to cancel them. Or we might want to cancel them based on other conditions. This post is about common ways to create cancellable functions in Go.</p>\n<p>Let's start with a simple use case where we want to abort a function if it takes too long to complete.</p>\n<h3 id=\"timeout-functions\">Timeout Functions <a class=\"direct-link\" href=\"#timeout-functions\">#</a></h3>\n<p>Let's assume that we have a function <code>func f()</code> and we want to limit the execution time of <code>f</code> within duration <code>d</code>. This kind of function will stop when either <code>f</code> finishes its operation or <code>d</code> timeout is reached. This reminds us of the <code>select</code> statement in Go, which can listen on multiple channels at the same time.</p>\n<p>To solve the above problem, we can use <code>select</code> in combination with <code>channel</code> and a <code>timer</code> like below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>t<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/cotxw8lnpRX\">Playground</a></p>\n<p>The above solution is good, but what if you want to cancel the function not only by timeout but also for other reasons, such as on shutdown or when its caller aborts the mission? We need a more powerful tool for this, and I believe nothing is more suitable than <code>context.Context</code>.</p>\n<h3 id=\"cancellable-context\">Cancellable Context <a class=\"direct-link\" href=\"#cancellable-context\">#</a></h3>\n<p>Context was designed for carrying contextual values during function executions but I feel it's more for cancellation. Context provides multiple ways for sending cancellation signals to multiple levels of functions calls either by timeout or on-demand:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// cancellation signal is sent when cancel() is called.</span><br>ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// cancellation signal is sent when the timeout is reached.</span><br>ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// cancellation signal is sent when the deadline is reached.</span><br>ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Minute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// disable cancellation if any in parent context.</span><br>ctx <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithoutCancel</span><span class=\"token punctuation\">(</span>parentContext<span class=\"token punctuation\">)</span></code></pre>\n<p>The same version of the above function can be done with Context as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span><br>\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>And here is how you use it:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Cancel on demand</span><br>ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*do something*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Cancel when timeout is reached.</span><br>ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*do something*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Don't want to cancel it at all</span><br>ctx <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithoutCancel</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*do something*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/KigLcJd1t0b\">Playground</a></p>\n<h3 id=\"generics\">Generics <a class=\"direct-link\" href=\"#generics\">#</a></h3>\n<p>If the function has return values, a similar thing can be done by changing the channel value, and if it's timeout, we want to return error to indicate that the function was failed because of timeout. In this case we can use it with context.Cause as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> Do<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>t T<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">type</span> v <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\t\tt T<br>\t\te <span class=\"token builtin\">error</span><br>\t<span class=\"token punctuation\">}</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> v<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br>\t\tt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\tc <span class=\"token operator\">&lt;-</span> v<span class=\"token punctuation\">{</span>t<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> v <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>e<br>\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>\t\t<span class=\"token keyword\">return</span> t<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">Cause</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>With this generic version of the function, we can use it with many different functions with different return types:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/1uBsPg_PqGe\">Playground</a></p>\n<h3 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h3>\n<p>With just a simple combination of channel and context, but we could make a very powerful tool for cancellable functions. You can based on the above suggestion implementations to make your own versions. And I believe that you will find that it's even more powerful than what I have shown you so far.</p>\n",
      "date_published": "2023-10-01T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-private-module/",
      "url": "https://thefortunedays.com/articles/go-private-module/",
      "title": "Go Private Module",
      "content_html": "<p>Sooner or later as a Go developer, you will need to build a module for reusing common code across the applications. If your module is public, that's quite straight forward, just create a public repository in GitHub or GitLab, make sure <code>go.mod</code> is defined correctly and you're ready. But if your module is private, there are some steps that need to be done so that Go Module works correctly. This post is all about initializing and setting up a private Go module.</p>\n<h2 id=\"init-module-with-git-full-qualify-domain-name\">Init Module With Git Full Qualify Domain Name <a class=\"direct-link\" href=\"#init-module-with-git-full-qualify-domain-name\">#</a></h2>\n<p>Normally you should name your module to match with where your repository is located in your Git server.</p>\n<p>If your your code located at: <code>https://gitlab.mycompany.com/my-module</code>, your <code>go.mod</code> should be:</p>\n<pre class=\"language-go\"><code class=\"language-go\">module gitlab<span class=\"token punctuation\">.</span>mycompany<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>module<br><br><span class=\"token keyword\">go</span> <span class=\"token number\">1.21</span><span class=\"token number\">.0</span></code></pre>\n<p>Since your module name already included Git full qualify domain name, Go Module know exactly where to download your module, hence you can use the module name directly in other modules:</p>\n<pre class=\"language-go\"><code class=\"language-go\">module my<span class=\"token operator\">-</span>application<br><br><span class=\"token keyword\">go</span> <span class=\"token number\">1.21</span><span class=\"token number\">.0</span><br><br>require gitlab<span class=\"token punctuation\">.</span>mycompany<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>module v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span></code></pre>\n<h2 id=\"init-module-with-custom-name\">Init Module With Custom Name <a class=\"direct-link\" href=\"#init-module-with-custom-name\">#</a></h2>\n<p>If for some reasons, you don't want to include the full qualify domain name in your module name, you can define your module as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\">module my<span class=\"token operator\">-</span>module<br><br><span class=\"token keyword\">go</span> <span class=\"token number\">1.21</span><span class=\"token number\">.0</span></code></pre>\n<p>And to use it, you need to tell Go Module where to download your module. One of the solution is using <code>replace</code> directive:</p>\n<pre class=\"language-go\"><code class=\"language-go\">module my<span class=\"token operator\">-</span>application<br><br><span class=\"token keyword\">go</span> <span class=\"token number\">1.21</span><span class=\"token number\">.0</span><br><br>require my<span class=\"token operator\">-</span>module v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><br><br>replace my<span class=\"token operator\">-</span>module <span class=\"token operator\">=</span><span class=\"token operator\">></span> gitlab<span class=\"token punctuation\">.</span>mycompany<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>module v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span></code></pre>\n<p>And if during the development, you want to use local/unpublished code of <code>my-module</code> right away in other module for testing, you can also use the <code>replace</code> directive to point directly to where the module is located:</p>\n<pre class=\"language-go\"><code class=\"language-go\">module my<span class=\"token operator\">-</span>application<br><br><span class=\"token keyword\">go</span> <span class=\"token number\">1.21</span><span class=\"token number\">.0</span><br><br>require my<span class=\"token operator\">-</span>module v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span><br><br>replace my<span class=\"token operator\">-</span>module <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>relative<span class=\"token operator\">/</span>or<span class=\"token operator\">/</span>absolute<span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>module</code></pre>\n<h2 id=\"local-development\">Local Development <a class=\"direct-link\" href=\"#local-development\">#</a></h2>\n<p>To build the code locally, the first step is to tell Go Module that your module is private so that it doesn't use its proxy or checksum database against your module.</p>\n<p>This can be done by using the <code>GOPRIVATE</code> environment variable. And if your company Git server doesn't use certified certificates, you might consider to use <code>GOINSECURE</code> to ignore certificates verification issues while downloading the module:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPRIVATE</span><span class=\"token operator\">=</span>gitlab.mycompany.com/*<br>go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOINSECURE</span><span class=\"token operator\">=</span>gitlab.mycompany.com/*</code></pre>\n<p>Go Module uses Git under the hood. Hence you need to set up your Git client to allow downloading your module without prompting for username/password. This can be done by set an environment variable named <code>NETRC</code> or a file <code>.netrc</code> at your home directory:</p>\n<pre class=\"language-go\"><code class=\"language-go\">machine <span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span> login <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span> password <span class=\"token operator\">&lt;</span>token<span class=\"token operator\">></span></code></pre>\n<p>After finishing this step, you're ready to <code>go get</code> your private module</p>\n<h2 id=\"ci%2Fcd\">CI/CD <a class=\"direct-link\" href=\"#ci%2Fcd\">#</a></h2>\n<p>You can apply the same steps of local development to the CI/CD pipeline. Below is an example of using GitLab CI:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">GOPRIVATE</span><span class=\"token punctuation\">:</span> gitlab.mycompany.com/*<br>  <span class=\"token key atrule\">GOINSECURE</span><span class=\"token punctuation\">:</span> gitlab.mycompany.com/*<br><br><span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> golang<span class=\"token punctuation\">:</span>1.21.0<br>    <span class=\"token key atrule\">pull_policy</span><span class=\"token punctuation\">:</span> if<span class=\"token punctuation\">-</span>not<span class=\"token punctuation\">-</span>present<br>  <span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> printf \"machine gitlab.mycompany.com\\nlogin gitlab<span class=\"token punctuation\">-</span>ci<span class=\"token punctuation\">-</span>token\\npassword $<span class=\"token punctuation\">{</span>CI_JOB_TOKEN<span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span> ~/.netrc<br>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> go build ./<span class=\"token punctuation\">...</span></code></pre>\n<p>And now your pipeline is ready to download your private module.</p>\n",
      "date_published": "2023-09-24T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/fast-comes-with-a-cost/",
      "url": "https://thefortunedays.com/articles/fast-comes-with-a-cost/",
      "title": "Fast Comes With A Cost",
      "content_html": "<p><img src=\"https://res.cloudinary.com/pthethanh/image/upload/v1689346704/pthethanh/fast-come-with-a-cost/fast-worg.png\" alt=\"I did it fast\"></p>\n<p>I did it fast</p>\n<p>A teacher asks his students to do some fast calculation exercises to see who is the fastest one in the class. There is a student who answers all the questions almost instantly. The only problem is that almost all of his answers are wrong. &quot;But I did it fast&quot; - the student said.</p>\n<p>This story is very similar to software development. When you do it fast, there are details to be missed, hence bugs and technical debts are always behind you - waiting to be paid.</p>\n<p>All developers know this but sometimes you don't have any choice and have to go with the flow. The only difference is that sometimes your stakeholders understand it well and always support you whatever it costs. But you're not always lucky. And when luck is not your friend, let's hope that you have enough time to pay your debts.</p>\n",
      "date_published": "2023-07-15T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-map-hash/",
      "url": "https://thefortunedays.com/articles/go-map-hash/",
      "title": "Go Map Hash",
      "content_html": "<h2 id=\"maphash\">maphash <a class=\"direct-link\" href=\"#maphash\">#</a></h2>\n<p>Map implementation is one of the interesting features in Go, it accepts anything as key, from string to numbers or even complex structs. And the magic thing is it is able to calculate the hash code of the given key effectively without the need to provide any hash code function. I feel this is really interesting and it stimulates my curiosity every single time I use map.</p>\n<p>I would like to know how it's implemented and whether I can use the same implementation for some other contexts. But unfortunately, Go doesn't expose the hash code implementation for us to use directly. If you have enough knowledge about Go compiler and Go runtime you still can investigate and copy the implementation. I actually tried but found it's quite challenging and requires a lot of effort. It requires a lot of understanding about the compiler and runtime and also requires understanding of assembly code - which I feel is a little bit scary [1].</p>\n<p>Luckily, Go have another package that helps to simplify the implementation of hash code for map. It is the package <code>maphash</code>. With the <code>maphash</code> package, we can easily implement the hash code the primitive types like string or numbers:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> h maphash<span class=\"token punctuation\">.</span>Hash<br>h<span class=\"token punctuation\">.</span><span class=\"token function\">SetSeed</span><span class=\"token punctuation\">(</span>maphash<span class=\"token punctuation\">.</span><span class=\"token function\">MakeSeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>h<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><br>hashCode <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10811116414953202048</span></code></pre>\n<p><a href=\"https://go.dev/play/p/08MZh66HNxJ\">Playground</a></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">number</span> <span class=\"token punctuation\">:</span>= 12.3<br>var h maphash.Hash<br>h.<span class=\"token function\">SetSeed</span><span class=\"token punctuation\">(</span>maphash.<span class=\"token function\">MakeSeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>binary.<span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>&amp;h<span class=\"token punctuation\">,</span> binary.BigEndian<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><br><span class=\"token property\">hashCode</span> <span class=\"token punctuation\">:</span>= h.<span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> // 4236663090134902550</code></pre>\n<p><a href=\"https://go.dev/play/p/2YSIZsOWhio\">Playground</a></p>\n<p>But what if we have a key of the map is a struct that includes fields of different types like below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Employee <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tName      <span class=\"token builtin\">string</span><br>\tAge       <span class=\"token builtin\">int</span><br>\tAddress   <span class=\"token builtin\">string</span><br>\tBirthDate time<span class=\"token punctuation\">.</span>Time<br><span class=\"token punctuation\">}</span></code></pre>\n<p>How can we implement the hash code? You might think that we just need to convert everything into string and contact them together to form a key? But it will cause some problems, the 2 following employees will have the same key and hence the same hash code:</p>\n<pre class=\"language-go\"><code class=\"language-go\">e1 <span class=\"token operator\">:=</span> Employee<span class=\"token punctuation\">{</span><br>\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span><br>\tAge<span class=\"token punctuation\">:</span>  <span class=\"token number\">15</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// Key: Jack15</span><br><br>e2 <span class=\"token operator\">:=</span> Employee<span class=\"token punctuation\">{</span><br>\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jack1\"</span><span class=\"token punctuation\">,</span><br>\tAge<span class=\"token punctuation\">:</span>  <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// Key: Jack15</span></code></pre>\n<p><a href=\"https://go.dev/play/p/Ul9X8P6XmkJ\">Playground</a></p>\n<p>You can argue that we can add a separator between the fields... but then we need to identify which ones are safe to use. And if the separator collides with the value of the key?</p>\n<p>Because of those complexities, we need another simple mechanism to apply. But unfortunately there is no guideline from Go on how to implement the hash code. Hence the best way I can imagine is to use the similar mechanism that I used to use while working with Java. This mechanism uses 2 primes numbers, one as the init of the hash code and another one as a multiply factor for the hash code. It is quite popular in the Java community. The steps can be described as below:</p>\n<ol>\n<li>Let call the hash code we want to calculate is <code>sum</code></li>\n<li>Init <code>sum</code> with value is a prime number. i.e. 7: <code>sum = 7</code></li>\n<li>For every single field <code>n</code> of the given struct, calculate its hash code <code>sum_n</code>.\n<ol>\n<li>If type of the field is kind of byte or string, write directly to the <code>maphash.Hash</code></li>\n<li>If type of the field is boolean, number, or slice values of them, use <code>binary.Write</code> to write to the <code>maphash.Hash</code></li>\n<li>If it's time, get its binary value by calling <code>MarshalBinary()</code> and write to the <code>maphash.Hash</code>. Or you can simply get the <code>UnixNano()</code> and uses <code>binary.Write</code> for it.</li>\n<li>If you have a slice or map of types, iterate over it and apply the same principle to calculate its sum.</li>\n</ol>\n</li>\n<li>Combine the <code>sum_n</code> with the total sum by multiple it with the multiply factor (which is also another prime number), i.e 31: <code>sum = sum * 31 + sum_n</code></li>\n<li>Perform step #3 and #4 for all the fields of the struct that should be used for comparing the struct.</li>\n</ol>\n<p>Applying the above rules, we can have the hash code for the struct <code>Employee</code> as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> seed <span class=\"token operator\">=</span> maphash<span class=\"token punctuation\">.</span><span class=\"token function\">MakeSeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">hashEmployee</span><span class=\"token punctuation\">(</span>e Employee<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">var</span> h maphash<span class=\"token punctuation\">.</span>Hash<br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">SetSeed</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><br>\tsum <span class=\"token operator\">:=</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><br><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><br>\tsum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tbinary<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">.</span>LittleEndian<span class=\"token punctuation\">,</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\tsum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">)</span><br>\tsum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tb<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span>BirthDate<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalBinary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\th<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br>\tsum <span class=\"token operator\">=</span> sum<span class=\"token operator\">*</span><span class=\"token number\">31</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> sum<br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">hashEmployee</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4034376227000349563</span><br><span class=\"token function\">hashEmployee</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9233382178721626727</span></code></pre>\n<p><a href=\"https://go.dev/play/p/nj0IPwvY3lw\">Playground</a></p>\n<p>I think this mechanism is quite easy to use and its performance is acceptable for production code.</p>\n<h2 id=\"unsafe-hack\">Unsafe Hack <a class=\"direct-link\" href=\"#unsafe-hack\">#</a></h2>\n<p>If you are not happy with the performance of the above hash mechanism and still want to use the Go internal hash implementation, below is an unsafe hack that you might want to consider:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> UnsafeHashOf<span class=\"token punctuation\">[</span>T comparable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>seed maphash<span class=\"token punctuation\">.</span>Seed<span class=\"token punctuation\">,</span> v T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span><br>\th <span class=\"token operator\">:=</span> getHashFunc<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>seed maphash<span class=\"token punctuation\">.</span>Seed<span class=\"token punctuation\">,</span> v T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// internal/abi/type.go -> Type</span><br><span class=\"token keyword\">type</span> abiType <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tSize_       <span class=\"token builtin\">uintptr</span><br>\tPtrBytes    <span class=\"token builtin\">uintptr</span> <span class=\"token comment\">// number of (prefix) bytes in the type that can contain pointers</span><br>\tHash        <span class=\"token builtin\">uint32</span>  <span class=\"token comment\">// hash of type; avoids computation in hash tables</span><br>\tTFlag       <span class=\"token builtin\">uint8</span>   <span class=\"token comment\">// extra type information flags</span><br>\tAlign_      <span class=\"token builtin\">uint8</span>   <span class=\"token comment\">// alignment of variable with this type</span><br>\tFieldAlign_ <span class=\"token builtin\">uint8</span>   <span class=\"token comment\">// alignment of struct field with this type</span><br>\tKind_       <span class=\"token builtin\">uint8</span>   <span class=\"token comment\">// enumeration for C</span><br>\t<span class=\"token comment\">// function for comparing objects of this type</span><br>\t<span class=\"token comment\">// (ptr to object A, ptr to object B) -> ==?</span><br>\tEqual <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><br>\t<span class=\"token comment\">// GCData stores the GC type data for the garbage collector.</span><br>\t<span class=\"token comment\">// If the KindGCProg bit is set in kind, GCData is a GC program.</span><br>\t<span class=\"token comment\">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span><br>\tGCData    <span class=\"token operator\">*</span><span class=\"token builtin\">byte</span><br>\tStr       <span class=\"token builtin\">int32</span> <span class=\"token comment\">// string form</span><br>\tPtrToThis <span class=\"token builtin\">int32</span> <span class=\"token comment\">// type for pointer to this type, may be zero</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// internal/abi/type.go -> MapType</span><br><span class=\"token keyword\">type</span> abiMapType<span class=\"token punctuation\">[</span>T comparable<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tabiType<br>\tKey    <span class=\"token operator\">*</span>abiType<br>\tElem   <span class=\"token operator\">*</span>abiType<br>\tBucket <span class=\"token operator\">*</span>abiType <span class=\"token comment\">// internal type representing a hash bucket</span><br>\t<span class=\"token comment\">// function for hashing keys (ptr to key, seed) -> hash</span><br>\tHasher     hashFunc<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><br>\tKeySize    <span class=\"token builtin\">uint8</span>  <span class=\"token comment\">// size of key slot</span><br>\tValueSize  <span class=\"token builtin\">uint8</span>  <span class=\"token comment\">// size of elem slot</span><br>\tBucketSize <span class=\"token builtin\">uint16</span> <span class=\"token comment\">// size of bucket</span><br>\tFlags      <span class=\"token builtin\">uint32</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> hashFunc<span class=\"token punctuation\">[</span>T comparable<span class=\"token punctuation\">]</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">*</span>T<span class=\"token punctuation\">,</span> seed maphash<span class=\"token punctuation\">.</span>Seed<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uintptr</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h hashFunc<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Sum64</span><span class=\"token punctuation\">(</span>seed maphash<span class=\"token punctuation\">.</span>Seed<span class=\"token punctuation\">,</span> v T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint64</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span> seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> emptyInterface <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> typ <span class=\"token operator\">*</span>abiType <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> getHashFunc<span class=\"token punctuation\">[</span>T comparable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> hashFunc<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>abiMapType<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>emptyInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Hasher<br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/KamuMXsaIHD\">Playground</a></p>\n<p>Please note that the above hack is not safe and will be broken if Go change its internal types.</p>\n<h2 id=\"performance\">Performance <a class=\"direct-link\" href=\"#performance\">#</a></h2>\n<p>Performance of using maphash is much worse compared to the hack method but it's safe to use. Hence you can base on your use-case to decide which one is suitable.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">goos: linux<br>goarch: amd64<br>pkg: github.com/pthethanh/cache<br>cpu: 12th Gen Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Core<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> i7-1255U<br>BenchmarkMapHashNormal-12        <span class=\"token number\">9833695</span>               <span class=\"token number\">110.4</span> ns/op           <span class=\"token number\">184</span> B/op          <span class=\"token number\">3</span> allocs/op<br>BenchmarkMapHashHack-12         <span class=\"token number\">29772643</span>                <span class=\"token number\">38.80</span> ns/op           <span class=\"token number\">64</span> B/op          <span class=\"token number\">1</span> allocs/op<br>PASS<br>ok      github.com/pthethanh/cache      <span class=\"token number\">2</span>.411s</code></pre>\n<p><a href=\"https://go.dev/play/p/CTftjsDPNld\">Playground</a></p>\n<hr>\n<p>[1] You can take a look at the implementation of map in Go at <a href=\"https://github.com/golang/go/blob/master/src/runtime/map.go\">map.go</a>, <a href=\"https://github.com/golang/go/blob/master/src/runtime/map_fast32.go\">map_fast32.go</a>, <a href=\"https://github.com/golang/go/blob/master/src/runtime/map_fast64.go\">map_fast64.go</a>, <a href=\"https://github.com/golang/go/blob/master/src/runtime/map_faststr.go\">map_faststr.go</a>, <a href=\"https://github.com/golang/go/blob/master/src/runtime/alg.go\">alg.go</a> and some relevant assembly code files can be found in the same run time package.</p>\n",
      "date_published": "2023-06-10T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/golang-string-concatenation-performance/",
      "url": "https://thefortunedays.com/articles/golang-string-concatenation-performance/",
      "title": "String Concatenation Performance in Go.",
      "content_html": "<p><strong>Summary</strong>: strings.Builder gives very good performance in general, but we can improve it even better.</p>\n<p>Go string concatenation performance comparison</p>\n<p>String concatenation is a basic task that I often do as a developer, but I have never considered much about its performance. This article is a result of my curiosity about this topic.</p>\n<h2 id=\"navie\">Navie <a class=\"direct-link\" href=\"#navie\">#</a></h2>\n<p>The very normal approach that I often took when I first started with Go was to use a naive concatenation like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">concatNaive</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\trs <span class=\"token operator\">:=</span> ss<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\trs <span class=\"token operator\">+=</span> ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\">// cause memory allocation</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> rs<br><span class=\"token punctuation\">}</span></code></pre>\n<p>But this approach gives the worst performance. The statement <code>rs += ss[i]</code> will allocate new memory each time it is called. And we all know that allocation reduces the performance of function calls. Hence, we have to avoid it as much as we can.</p>\n<p>The simple way to avoid multiple allocations is to allocate them in advance and make sure we allocate enough memory to avoid any additional allocations during the function calls. I came up with another brilliant idea, where I allocate the memory in advance and assign it byte by byte:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">concatAssignIndex</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\tlength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">if</span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// create &amp; allocate the memory in advance.</span><br>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tn <span class=\"token operator\">+=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\tb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br>\tidx <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t\tb<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><br>\t\t\tidx<span class=\"token operator\">++</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>I thought it should be great, but this turns out to be another naive solution. You can see the nested loops that cause the big performance issue in the above block of code.</p>\n<p>So, I gave up and tried one of the solutions recommended by most people in the community, <code>strings.Builder</code>.</p>\n<h2 id=\"string-builder\">String Builder <a class=\"direct-link\" href=\"#string-builder\">#</a></h2>\n<p><code>strings.Builder</code> maintains an underlying byte buffer and exposes the <code>Grow(int)</code> method so that we can use it to grow the underlying buffer. The code using the string builder will look like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">concatStringBuilder</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\tlength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">if</span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><br>\t<span class=\"token punctuation\">}</span><br>\tb <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// calculate the buffer size</span><br>\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tn <span class=\"token operator\">+=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// grow the buffer to avoid memory allocation during writing new string.</span><br>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">Grow</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tb<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Based on my testing, the <code>strings.Builder</code> gives very good performance and should be used in general cases. But one thing to notice when using strings.Builder is that you have to calculate the buffer size and grow it accordingly. Otherwise, the buffer will need to grow more and more during the function call, which will slow it down.</p>\n<p>I doubt if it's true that strings.Builder is the best one. I think we can improve it even further. Let's see how strings.Builder is implemented.</p>\n<h2 id=\"improved-string-builder\">Improved String Builder <a class=\"direct-link\" href=\"#improved-string-builder\">#</a></h2>\n<p>If we look at the <a href=\"https://cs.opensource.google/go/go/+/refs/tags/go1.20.3:src/strings/builder.go;l=76-92\">implementation</a> of the strings.Builder, we can see that it maintains a slice of bytes, using <code>make</code> with capacity to allocate memory in advance and <code>append</code> to append the string to the buffer:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// grow copies the buffer to a new, larger buffer so that there are at least n</span><br><span class=\"token comment\">// bytes of capacity beyond len(b.buf).</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>Builder<span class=\"token punctuation\">)</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tbuf <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><br>\tb<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> buf<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// WriteString appends the contents of s to b's buffer.</span><br><span class=\"token comment\">// It returns the length of s and a nil error.</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>Builder<span class=\"token punctuation\">)</span> <span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tb<span class=\"token punctuation\">.</span><span class=\"token function\">copyCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tb<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">,</span> s<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>This piece of code looks so good, and we can learn from it to make our own version. In our case, we don't really need <code>b.copyCheck()</code> as we have a function instead of a method of a struct. We can eliminate this check and have a simple function like the one below, similar to what the strings.Builder tries to do:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">concatFast</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\tlength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">if</span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><br>\t<span class=\"token punctuation\">}</span><br>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tn <span class=\"token operator\">+=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// create &amp; allocate the memory in advance.</span><br>\tb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tb <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// below statement causes a memory allocation.</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The above function looks good, as we calculated and allocated the buffer to the exact size of the output string, but there's still a problem. The last statement, <code>string(b)</code> causes a memory allocation and hence reduces the performance of the function call. Let's see the benchmark below, the concatFast has 2 allocations instead of 1, and its performance is slower than the strings.Builder:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">goos: windows<br>goarch: amd64<br>pkg: github.com<br>cpu: 12th Gen Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Core<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> i7-1255U<br>BenchmarkSmall/concat_fast_using_append__________-12             <span class=\"token number\">8743449</span>               <span class=\"token number\">148.8</span> ns/op           <span class=\"token number\">576</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkSmall/concat_string_builder_____________-12            <span class=\"token number\">12188716</span>                <span class=\"token number\">95.24</span> ns/op          <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op</code></pre>\n<p>Is there any way to avoid that allocation? You might wonder! Yes, there is a way to avoid that allocation by using <code>unsafe</code> package, and this is exactly the way strings.Builder does:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>Builder<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">SliceData</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>This hack is pretty cool, and we can apply it to our function, the improved version would look like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">concatFastImproved</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\tlength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">if</span> length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// create &amp; allocate the memory in advance.</span><br>\tn <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tn <span class=\"token operator\">+=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\tb <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tb <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> ss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">SliceData</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The above method looks pretty good and gives better performance compared to strings.Builder. An alternative to <code>append</code> is <code>copy</code>, and it would give a similar performance. Up to now, this has been the fastest solution so far.</p>\n<p>One lesson I learn from this is that it's always a good idea to use built-in functions like <code>copy</code> and <code>append</code> as much as we can. And by talking about built-in, I wonder if the solution of using the concatenation operator would give a similar performance.</p>\n<h2 id=\"%2B-operator\">+ Operator <a class=\"direct-link\" href=\"#%2B-operator\">#</a></h2>\n<p>This is one of the simplest solutions ever. Just do <code>s[0] + s[2] + s[3]+ ... + s[n]</code> and we can have what we want. This solution gives a very good performance, which is similar to our improved version of strings.Builder.</p>\n<p>I think the reason is because the way Go runtime also uses <code>copy</code> in its <a href=\"https://go.dev/src/runtime/string.go#L20\">implementation</a>, but it seems its optimization is just for strings with length &lt;= <a href=\"https://go.dev/src/runtime/string.go#L14\">32</a>, so if our string is longer than that, the optimization seems not to be applied.</p>\n<p>But notice that the challenge when you want to use this approach is that you have to know the length of the slice in advance. I think usage of this is limited.</p>\n<h2 id=\"other-solutions%3F\">Other solutions? <a class=\"direct-link\" href=\"#other-solutions%3F\">#</a></h2>\n<p>Other solutions, including <code>fmt.Sprintf</code> or using <code>bytes.Buffer</code> give much worse performance than our improved version of string builder. But maybe there are still a lot of other solutions that I don't know yet.</p>\n<h2 id=\"the-code-and-the-benchmark\">The code and the benchmark <a class=\"direct-link\" href=\"#the-code-and-the-benchmark\">#</a></h2>\n<p>I tested all the approaches with small, medium, and big slices with lengths of 10, 100, and 10,000 respectively to see the differences, and the winner is our improved version of strings.Builder.</p>\n<p>You can see the code here in the <a href=\"https://gist.github.com/pthethanh/e7624f54d98633c3e7f0c71415a253b1\">gist</a>. And below is the benchmark:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">goos: windows<br>goarch: amd64<br>pkg: github.com<br>cpu: 12th Gen Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Core<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> i7-1255U<br>BenchmarkSmall/concat_naive______________________-12             <span class=\"token number\">2725071</span>               <span class=\"token number\">449.6</span> ns/op          <span class=\"token number\">1520</span> B/op          <span class=\"token number\">9</span> allocs/op<br>BenchmarkSmall/concat_string_builder_without_grow-12             <span class=\"token number\">3993370</span>               <span class=\"token number\">287.7</span> ns/op           <span class=\"token number\">984</span> B/op          <span class=\"token number\">5</span> allocs/op<br>BenchmarkSmall/concat_assign_index_______________-12             <span class=\"token number\">4681068</span>               <span class=\"token number\">255.5</span> ns/op           <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkSmall/concat_bytes_buffer_______________-12             <span class=\"token number\">6646387</span>               <span class=\"token number\">179.3</span> ns/op           <span class=\"token number\">576</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkSmall/concat_fast_using_append__________-12             <span class=\"token number\">8743449</span>               <span class=\"token number\">148.8</span> ns/op           <span class=\"token number\">576</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkSmall/concat_string_builder_____________-12            <span class=\"token number\">12188716</span>                <span class=\"token number\">95.24</span> ns/op          <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkSmall/concat_+_operator_________________-12            <span class=\"token number\">11912088</span>                <span class=\"token number\">96.59</span> ns/op          <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkSmall/concat_fast_improved______________-12            <span class=\"token number\">13002703</span>                <span class=\"token number\">90.33</span> ns/op          <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkSmall/concat_fast_improved_using_copy___-12            <span class=\"token number\">14131878</span>                <span class=\"token number\">97.54</span> ns/op          <span class=\"token number\">288</span> B/op          <span class=\"token number\">1</span> allocs/op<br><br>BenchmarkMedium/concat_naive______________________-12              <span class=\"token number\">14560</span>             <span class=\"token number\">82115</span> ns/op          <span class=\"token number\">509697</span> B/op         <span class=\"token number\">98</span> allocs/op<br>BenchmarkMedium/concat_string_builder_without_grow-12             <span class=\"token number\">172482</span>              <span class=\"token number\">5974</span> ns/op           <span class=\"token number\">34240</span> B/op         <span class=\"token number\">12</span> allocs/op<br>BenchmarkMedium/concat_assign_index_______________-12             <span class=\"token number\">130524</span>              <span class=\"token number\">8269</span> ns/op            <span class=\"token number\">9472</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkMedium/concat_bytes_buffer_______________-12             <span class=\"token number\">447615</span>              <span class=\"token number\">2940</span> ns/op           <span class=\"token number\">18944</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkMedium/concat_fast_using_append__________-12             <span class=\"token number\">376473</span>              <span class=\"token number\">2819</span> ns/op           <span class=\"token number\">18944</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkMedium/concat_string_builder_____________-12             <span class=\"token number\">655304</span>              <span class=\"token number\">1619</span> ns/op            <span class=\"token number\">9472</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkMedium/concat_+_operator_________________-12             <span class=\"token number\">746950</span>              <span class=\"token number\">1637</span> ns/op            <span class=\"token number\">9472</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkMedium/concat_fast_improved______________-12             <span class=\"token number\">749499</span>              <span class=\"token number\">1613</span> ns/op            <span class=\"token number\">9472</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkMedium/concat_fast_improved_using_copy___-12             <span class=\"token number\">864777</span>              <span class=\"token number\">1623</span> ns/op            <span class=\"token number\">9472</span> B/op          <span class=\"token number\">1</span> allocs/op<br><br>BenchmarkBig/concat_naive______________________-12                     <span class=\"token number\">2</span>         <span class=\"token number\">745434800</span> ns/op        <span class=\"token number\">4995658496</span> B/op    <span class=\"token number\">10072</span> allocs/op<br>BenchmarkBig/concat_string_builder_without_grow-12                  <span class=\"token number\">1558</span>            <span class=\"token number\">901401</span> ns/op         <span class=\"token number\">5241548</span> B/op         <span class=\"token number\">30</span> allocs/op<br>BenchmarkBig/concat_assign_index_______________-12                  <span class=\"token number\">1155</span>            <span class=\"token number\">941113</span> ns/op          <span class=\"token number\">999430</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkBig/concat_bytes_buffer_______________-12                  <span class=\"token number\">2985</span>            <span class=\"token number\">438088</span> ns/op         <span class=\"token number\">1998854</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkBig/concat_fast_using_append__________-12                  <span class=\"token number\">2904</span>            <span class=\"token number\">444509</span> ns/op         <span class=\"token number\">1998854</span> B/op          <span class=\"token number\">2</span> allocs/op<br>BenchmarkBig/concat_string_builder_____________-12                  <span class=\"token number\">4792</span>            <span class=\"token number\">245516</span> ns/op          <span class=\"token number\">999429</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkBig/concat_fast_improved______________-12                  <span class=\"token number\">4142</span>            <span class=\"token number\">242516</span> ns/op          <span class=\"token number\">999429</span> B/op          <span class=\"token number\">1</span> allocs/op<br>BenchmarkBig/concat_fast_improved_using_copy___-12                  <span class=\"token number\">4478</span>            <span class=\"token number\">260349</span> ns/op          <span class=\"token number\">999430</span> B/op          <span class=\"token number\">1</span> allocs/op<br>PASS<br>ok      github.com        <span class=\"token number\">39</span>.751s</code></pre>\n<h2 id=\"lessons-learn\">Lessons Learn <a class=\"direct-link\" href=\"#lessons-learn\">#</a></h2>\n<p>I think there are a couple of things we can learn from this:</p>\n<ul>\n<li>Avoid memory allocation as much as we can.</li>\n<li>Whenever a slice is used, try to allocate enough memory for it in advance.</li>\n<li>Take advantage of built-in functions like <code>append</code>, <code>copy</code>,...</li>\n<li>Sometimes <code>unsafe</code> package can provide some pretty good hacks for better performance, but they should be used with care.</li>\n<li>Try to run benchmarks with multiple cases, small, medium, and large inputs to see the differences and improve the code from there.</li>\n<li>There are a lot of things we can learn from the Go SDK, like strings.Builder in this case.</li>\n<li>Explore the SDK code is a good way to learn and be a better Gopher.</li>\n</ul>\n",
      "date_published": "2023-04-10T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/learning-by-distraction/",
      "url": "https://thefortunedays.com/articles/learning-by-distraction/",
      "title": "Learning By Distraction",
      "content_html": "<p>Sometimes, the fear of doing the job is even more than the difficulties of the job itself. Learning English is one of them. In my early years as a software developer, I feared learning English so hard (even now). After struggling speaking English on my first trip to India[1], I felt ashamed and had enough motivation to learn English.</p>\n<p>But learning English is somewhat burdensome to me. It became more and more heavy until I could not take it anymore. I tried different ways to learn but most of them just last for a few weeks. The more I tried, the more I failed. I finally gave up the plan of active learning, and tried one of the passive methods of learning - what I later called learning by distraction.</p>\n<p>Instead of learning English, I started reading books about the subjects that I liked. Of course all the books were in English. It’s really hard at the beginning but because it’s the subject that I liked, the enthusiasm for the knowledge kept me going. The first book I read was The 21 Success Secrets Of Self-made Millionaires by Brian Tracy. The book has only 88 pages but it took me 3 months to read, just around 1 page per day. Although I didn’t fully understand everything I read, the book helped me a lot in my work. Mostly because I started to believe in myself more. And that little reward gave me enough motivation to continue to read more and more.</p>\n<p>Most of the time, I made guesses about what I read. Sometimes, it was because I didn’t have enough vocabulary to understand them. Sometimes, I knew every single word in a sentence, but I was not able to link them together. But I didn’t try to re-read it again and again, I just accepted it and went on. I kept doing it by picking up another book that I was interested in and read again. And by focusing on the content of the book, I gradually forgot the burden of learning English and became better at reading.</p>\n<p>I think, to learn English, sometimes you don’t even need to think of learning English. But instead, learn something that you are interested in and let your enthusiasm drive you. By the time you become better at the subject, your English will also become better. By keeping reading about the subject, you will gradually build up your vocabulary. The vocabulary will automatically emerge again and again and it will automatically inject into your brain.</p>\n<p>You might not be better than anyone else around you. And you might not become an expert at English. But at least you will become better than you were before - both at English and the subject that you read.</p>\n<hr>\n<p>[1] I went to India for 2 months for a business trip as a developer in 2011. But my English was bad and I could not communicate with them by speaking. I communicated with people by chatting on Skype. Fortunately, there was a good friend who helped me to translate from normal English to simple English whenever I needed to talk to someone else. And whenever I need to order food, I used my finger to point at the pictures on the menu :))</p>\n",
      "date_published": "2023-01-31T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/the-bus/",
      "url": "https://thefortunedays.com/articles/the-bus/",
      "title": "The Bus",
      "content_html": "<p>I took my first job as a software developer in Ho Chi Minh city more than 12 years ago. It was the third time I visited the city and yet everything was strange to me. I didn’t know how to drive and didn’t have a motorbike at the time. Hence I went to work by bus for around 2 years before saving enough money to buy my first motorbike.</p>\n<p>For most people, catching a bus is easy, but for me it was hard. I lived far away from the bus station, hence everyday I had to walk more than 1 kilometer to get there. It took me some days to learn the path to the bus station. At first, I didn’t know how to catch a bus. I didn’t know if I should wave my hand. Or should I stand there and someone on the bus would ask me if I wanted to go. My younger brother showed me how to do it earlier, but I was too nervous to remember anything. Luckily, I was a good learner. After I missed some of them, I saw people waving their hands when the bus came. This was a great success. I finally knew how to catch a bus.</p>\n<p>I thought if I could catch a bus, there would be no other challenge that could stop me. But I was wrong. I didn’t know when to tell the driver to stop. Everything looked exactly the same through the window. In the first 2 months, there’re a lot of times I had to walk around 1 kilometer back to the company, sometimes even more. The worst time was when I had to go to the other side of the street to catch another bus to go back. I felt so embarrassed.</p>\n<p>After so many times walking back too far from the company, I decided I needed to find a better way to stop the bus. The first solution was to ask the bus conductor whether the bus was nearby my company. This solution worked quite well when I met good conductors who were happy to help and have a good memory. But sometimes, there were too many people asking and they simply forgot me. Whenever I could not ask the conductor, I turned to asking the people on the bus. Some good people were willing to help but some didn't. And I also felt ashamed after asking people so many times. Hence, I started thinking of a new solution.</p>\n<p>The second solution was to try to identify a recognizable target. It could be a colorful building or colorful objects on the street that I could see through the window. This solution worked well most of the time. But sometimes the bus was full of people and it’s hard to see anything through the window. Hence, sometimes I had to go back to solution number one.</p>\n<p>I tried to develop the skills for around 2 months. And I finally was able to recognize things quite easily. I was even able to recognize the differences between the trees nearby my company with the others. I didn’t need to ask anyone but became a person that other people can ask. And I was happy to do that.</p>\n<p>Apart from the challenges at the beginning, it was fun taking the bus to work. Once I got onto the bus, I didn’t need to worry about anything. I could spend my time looking at the buildings on the street through the window. I could look at people outside rushing their way to work. I could see a lot of different types of motorbikes, cars on the street - which was amazing to me at the time. I lived the entire of my childhood in the countryside. And I had not had a chance to see those things, hence everything was interesting to me.</p>\n<p>Even now, I still can imagine my curious face in those days. The good old days...</p>\n",
      "date_published": "2023-01-02T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/dragonfly/",
      "url": "https://thefortunedays.com/articles/dragonfly/",
      "title": "Dragonfly",
      "content_html": "<p>The dragonfly bit the shit out of me, I screamed and really scared but tried to keep calm enough to let it continue its job. &quot;Just one more time and I can swim&quot; - I thought.</p>\n<p>Just one minute earlier, my brother told me &quot;Let the dragonfly bite your belly button, you will be able to swim&quot;. I was really scared but my belief about the power of the dragonfly remained very strong. I believed I could swim, I believed I could explore the big river out there. I felt like a superman, and started swimming for the first time of my life.</p>\n<p>Although I drank a lot of water that day, it's amazing how those simple words can give a young boy such courage to try something he had not known yet. And I wonder if there is still something simple and powerful like that for the &quot;adult&quot; me now, so that I have enough courage to explore the unknown out there. The things that are both scary and interesting - just like the river that day.</p>\n<p>And I wonder if there is still someone like my brother that day, who cared for me enough to say &quot;Just do it, boy!&quot; when he saw me hesitated to do something? I think one must be very lucky to have this kind of sweet memory and having a person care for him/her that much in life. So, I started thinking I'm a lucky one.</p>\n<p>We're all lucky at some points in our life, but sometimes we're so busy to realize. The younger of me was too busy chasing so many &quot;vanity&quot; things that I called &quot;dreams&quot;. So maybe aging is one of my luck, to slow me down so that I have time to review what happened in my life, what I did good, what I did wrong...</p>\n<p>Having a chance to review what happened in my life makes me feel I'm very lucky. I met a lot of good people who taught and helped me a lot of things about work and life. I will not be who I am today without meeting those people, and I'm very thankful for that. And I think one of the greatest luck I've ever had is meeting my wife - a beautiful woman who loves and cares enough to say to me &quot;I love you and I believe you can do it!&quot; every time I need someone beside me.</p>\n<p>I think I don't need the power of the dragonfly anymore...</p>\n",
      "date_published": "2022-12-23T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/3-lessons/",
      "url": "https://thefortunedays.com/articles/3-lessons/",
      "title": "3 Lessons",
      "content_html": "<p>There are some good lessons in my life but sometimes I just forget them. So maybe putting them here is a good way to remember.</p>\n<p>The first lesson is there is no such thing called a perfect moment. You gotta do what you need to do at the time you think there is a need. Don't wait until everything is perfect, because that moment will never come and you will be late for everything.</p>\n<p>The second lesson is you are only able to solve a problem if you accept it as what it is. Accept it is a problem, a challenge that you need and only you can solve it. Not your colleagues, not your manager, not anyone else... it must be you. Only when you accept that's a problem, you will start finding solutions to solve it. If you keep refusing it's a problem that you are facing, you will not think of any solution and hence the problem remained the same forever.</p>\n<p>The third lesson is words lie, actions don't.</p>\n",
      "date_published": "2022-12-23T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/the-right-thing/",
      "url": "https://thefortunedays.com/articles/the-right-thing/",
      "title": "The Right Thing",
      "content_html": "<p>Sometimes it's hard to know what is the right thing to do. There are just so many things we have not known yet. And with our very limited knowledge, we just cannot find an easy answer for the question &quot;what is the right thing to do&quot;.</p>\n<p>There are a lot of tools for us to &quot;analyze&quot; but let's be honest, sometimes even everything is on the table but we still have moments like &quot;something is not right&quot;. And sometimes we have to &quot;just do it&quot; and hope that we made the right decision. But guess what, we never know.</p>\n<p>Things can be right at a specific time but will be very soon wrong at another time. This is because our perspective changes through time and through our experiences in life.</p>\n<p>Not just our perspective changes, people's perspective also changes. And hence the judgment about a specific problem will probably be changed.</p>\n<p>There are a lot of times, we just do it and then very soon realize that we made mistakes. We think we can make it right the second time, but let’s be honest, how many of us did it right the second time? Sometime we have to let life kick our ass real hard before realize the right thing to do. But is it really the right thing? Maybe just a little bit better than the last time. But at least it's better!</p>\n<p>So it's hard to know what is right. And I believe we just need to do &quot;better things&quot; every time.</p>\n<p>We might never know what is right but at least, we do it better every single time.</p>\n",
      "date_published": "2022-10-06T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-generics/",
      "url": "https://thefortunedays.com/articles/go-generics/",
      "title": "Go Generics",
      "content_html": "<p><strong>Summary</strong>: Overall, Go generics (also called as type parameters) is good, but not so good. Generics on types &amp; functions are supported, but methods are not - which causes a lot of limitations.</p>\n<p>This post is just my very first feelings about the generics feature of Go after some simple experimentation, it's not a full picture of what generics in Go looks like, if you want to see the full picture, check this very long <a href=\"https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md\">spec</a>.</p>\n<h3 id=\"the-good-things\">The Good Things <a class=\"direct-link\" href=\"#the-good-things\">#</a></h3>\n<p>Now you don't need to write function like max again and again for different data types:</p>\n<pre class=\"language-r\"><code class=\"language-r\">func max<span class=\"token punctuation\">[</span>T constraints.Ordered<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a T<span class=\"token punctuation\">,</span> b T<span class=\"token punctuation\">)</span> T <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">{</span><br>\t\treturn a<br>\t<span class=\"token punctuation\">}</span><br>\treturn b<br><span class=\"token punctuation\">}</span><br><br>max<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> <span class=\"token number\">2</span><br>max<span class=\"token punctuation\">(</span><span class=\"token number\">4.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span><span class=\"token operator\">/</span> <span class=\"token number\">4.5</span></code></pre>\n<p><a href=\"https://go.dev/play/p/tK0F9f80aef\">Playground</a></p>\n<p>And you can write a generics tree which can be only achieved in the past using interface{}</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> tree<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tLeft  <span class=\"token operator\">*</span>tree<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><br>\tRight <span class=\"token operator\">*</span>tree<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><br>\tValue T<br><span class=\"token punctuation\">}</span><br><br>t <span class=\"token operator\">:=</span> tree<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>t1 <span class=\"token operator\">:=</span> tree<span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/0M5bDzPIWMp\">Playground</a></p>\n<p>Typed parameters can be named or unnamed</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Index returns the index of e in s, or -1 if not found.</span><br><span class=\"token keyword\">func</span> Index<span class=\"token punctuation\">[</span>T <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span> <span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> e T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> i<br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Index returns the index of e in s, or -1 if not found.</span><br><span class=\"token keyword\">func</span> Index1<span class=\"token punctuation\">[</span>T Equaler<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T<span class=\"token punctuation\">,</span> e T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span> i<br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> Equaler<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span> <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/NzoNjfZL6js\">Playground</a></p>\n<p>We can also union multiple types together</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> numbers <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token builtin\">int</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">int8</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">int32</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">int64</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">float32</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">float64</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> min<span class=\"token punctuation\">[</span>T numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b T<span class=\"token punctuation\">)</span> T <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> b<br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> a<br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><br><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0.5</span></code></pre>\n<p><a href=\"https://go.dev/play/p/lJmPmrvECin\">Playground</a></p>\n<p>~ operator can be used to &quot;include&quot; all underlying types</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> degree <span class=\"token builtin\">int</span><br><br><span class=\"token keyword\">type</span> numbers <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t~<span class=\"token builtin\">int</span> <span class=\"token operator\">|</span> ~<span class=\"token builtin\">int8</span> <span class=\"token operator\">|</span> ~<span class=\"token builtin\">int32</span> <span class=\"token operator\">|</span> ~<span class=\"token builtin\">int64</span> <span class=\"token operator\">|</span> ~<span class=\"token builtin\">float32</span> <span class=\"token operator\">|</span> ~<span class=\"token builtin\">float64</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> min<span class=\"token punctuation\">[</span>T numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b T<span class=\"token punctuation\">)</span> T <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> a <span class=\"token operator\">></span> b <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> b<br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> a<br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><br><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0.5</span></code></pre>\n<p><a href=\"https://go.dev/play/p/hFn6dXMqNUg\">Playground</a></p>\n<p>comparable interface can be used for writing comparable functions:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> equal<span class=\"token punctuation\">[</span>T comparable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b T<span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">==</span> b<br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><br><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">degree</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><br><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span><br><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<p><a href=\"https://go.dev/play/p/CvT6p2CVbgp\">Playground</a></p>\n<h3 id=\"the-limitations\">The Limitations <a class=\"direct-link\" href=\"#the-limitations\">#</a></h3>\n<p><strong>Methods cannot be generics</strong></p>\n<p>What does it mean when methods cannot be generics? It means you will not be able to write a map or reduce API like Java. The main reason for not supporting this feature is because of typed parameters only known by the compiler, the runtime has no ideas about type parameters and this introduces some complexity for the instantiation during run time .</p>\n<p>You can see the full explanation from the Go team <a href=\"https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#No-parameterized-methods\">here</a>, it's pretty much well explained. But I personally don't really agree with them when they say &quot;one of the main roles of methods is to permit types to implement interfaces&quot; and used this to argue about not including generics on methods. To me, methods are more important than just to &quot;implement&quot; an interface.</p>\n<p>So any alternative way for writing map/reduce like API? Yes, use functions instead.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Map turns a []T1 to a []T2 using a mapping function.</span><br><span class=\"token comment\">// This function has two type parameters, T1 and T2.</span><br><span class=\"token comment\">// This works with slices of any type.</span><br><span class=\"token keyword\">func</span> Map<span class=\"token punctuation\">[</span>T1<span class=\"token punctuation\">,</span> T2 any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T1<span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">)</span> T2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T2 <span class=\"token punctuation\">{</span><br>\tr <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T2<span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> r<br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Reduce reduces a []T1 to a single value using a reduction function.</span><br><span class=\"token keyword\">func</span> Reduce<span class=\"token punctuation\">[</span>T1<span class=\"token punctuation\">,</span> T2 any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>T1<span class=\"token punctuation\">,</span> initializer T2<span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">,</span> T1<span class=\"token punctuation\">)</span> T2<span class=\"token punctuation\">)</span> T2 <span class=\"token punctuation\">{</span><br>\tr <span class=\"token operator\">:=</span> initializer<br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\tr <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> r<br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.googlesource.com/proposal/+/HEAD/design/43651-type-parameters.md#map_reduce_filter\">More Detail</a></p>\n<p><strong>Mixed types cannot be inferred as any</strong></p>\n<p>Typed parameters mean all parameters must be the same type. And the inference rule of Go is that it will check the type of the first parameter, others must follow the same. What does it mean? It means if you don't declare the first parameter as <code>any </code>explicitly, it will never be inferred as <code>any</code>.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> Print<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">...</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">//</span><br><span class=\"token keyword\">var</span> a any <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// VALID as all parameters will be inferred as \"any\".</span><br>Print<span class=\"token punctuation\">[</span>any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// VALID as we provided the type parameter as \"any\".</span><br><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// INVALID since its expect all parameters as int and \"2\" is not an int.</span></code></pre>\n<p><a href=\"https://go.dev/play/p/X-uugX8IHSJ\">Playground</a></p>\n<p>Although we can provide the type parameter when calling the method, but it is kind of inconvenient.</p>\n<p><strong>[T ~[]any] and [S ~[]T, T any] Are Different</strong></p>\n<p>This is not really a limitation, it is just a mistake people who first started with generics often face. The difference between the two declarations is the first one declares <code>any </code>as a specific type, the latter declares it as a parameter type.</p>\n<p>[T ~[]any] only accepts []any, but [S ~[]T, T any] will accept any kind of slices, such as: []int, []string, []any,...</p>\n<p><strong>Interfaces with methods can be used as a typed parameters, but cannot be &quot;union&quot;</strong></p>\n<p>Yes, it is. But what's the point of having union interfaces? I don't really know the usage of this case.</p>\n",
      "date_published": "2022-06-02T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/page-speed/",
      "url": "https://thefortunedays.com/articles/page-speed/",
      "title": "Page Speed Insights",
      "content_html": "<p><strong>Summary</strong>: The smaller size of HTML, JS, CSS and Images the better the performance.</p>\n<p>Web page performance is one of the most important things in web development. The better performance means the better user experiences and the better business.</p>\n<p>There are a lot of factors that impact the speed of web pages but in this post, I just list some major factors that impact the most to the performance of a web page and quickly show some solutions to address them.</p>\n<p>Actually, these are just my notes during the journey of improving performance of this blog, but hopefully someone can be benefited from this too.</p>\n<h3 id=\"html%2C-js%2C-css\">HTML, JS, CSS <a class=\"direct-link\" href=\"#html%2C-js%2C-css\">#</a></h3>\n<p>The best way to make web pages load fast is to reduce and minimize sizes of all relevant documents transferred from the web server. This includes HTML, JS, CSS, Images, Font,...</p>\n<p>For HTML and CSS, we can use a lot of HTML/CSS optimizer and also enable compression mechanisms (gzip) on the server to reduce the size of the document. This alone contributes a lot to the web page performance.</p>\n<p>For this blog, I use <code>minify-html</code> for HTML, <code>minify-js </code>for JS and <code>TailwindCSS minifier</code>for CSS.</p>\n<h3 id=\"web-fonts\">Web Fonts <a class=\"direct-link\" href=\"#web-fonts\">#</a></h3>\n<p>Web Fonts can cause a lot of issues for web performance, such as: blocking resources, heavy font sizes, cumulative layout shift.</p>\n<p>If you're using Google Web Fonts, you don't really need to do anything since they are already optimized very well. The only thing you need to do is to <code>preload</code> it in advance to avoid blocking resource issues.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preconnect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.gstatic.com<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Lobster<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Lobster<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>media<span class=\"token operator\">=</span><span class=\"token string\">'all'</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Lobster<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>If you use remote web fonts from other sites, Google Page Speed Insights might complain about the cache period of the fonts and hence reduce the score. To fix this problem, consider hosting the web fonts locally with a longer cache period..</p>\n<p>If you're using other types of fonts, consider using <code>woff2</code> for smaller size. Also sometimes fonts are composed of multiple languages and you don't really need them, consider using <code>fonttools</code> to create the subsets you need and use <code>unicode-range</code> of web fonts to tell the browsers to load a specific font only when needed.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">fonttools subset latest.woff2 --unicodes<span class=\"token operator\">=</span><span class=\"token string\">\"U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB,U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD\"</span> --flavor<span class=\"token operator\">=</span><span class=\"token string\">\"woff2\"</span><br>/* vietnamese */<br>@font-face <span class=\"token punctuation\">{</span><br>  font-family: <span class=\"token string\">'Lobster'</span><span class=\"token punctuation\">;</span><br>  font-style: normal<span class=\"token punctuation\">;</span><br>  font-weight: <span class=\"token number\">400</span><span class=\"token punctuation\">;</span><br>  src: url<span class=\"token punctuation\">(</span>https://fonts.gstatic.com/s/lobster/v27/neILzCirqoswsqX9zo2mM5Ez.woff2<span class=\"token punctuation\">)</span> format<span class=\"token punctuation\">(</span><span class=\"token string\">'woff2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br>/* latin */<br>@font-face <span class=\"token punctuation\">{</span><br>  font-family: <span class=\"token string\">'Lobster'</span><span class=\"token punctuation\">;</span><br>  font-style: normal<span class=\"token punctuation\">;</span><br>  font-weight: <span class=\"token number\">400</span><span class=\"token punctuation\">;</span><br>  src: url<span class=\"token punctuation\">(</span>https://fonts.gstatic.com/s/lobster/v27/neILzCirqoswsqX9zoKmMw.woff2<span class=\"token punctuation\">)</span> format<span class=\"token punctuation\">(</span><span class=\"token string\">'woff2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>For a complete example of the final web font, see: <a href=\"https://fonts.googleapis.com/css?family=Lobster\">https://fonts.googleapis.com/css?family=Lobster</a></p>\n<p>Web font is also a big contributor for the cumulative layout shift, especially for the above-of-the-fold content. To reduce this problem, consider using <code>font-display: optional </code>for your web fonts. This prevents both font blocking and layout shift.</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> SegoeUI<span class=\"token punctuation\">;</span><br>    <span class=\"token property\">src</span><span class=\"token punctuation\">:</span><br>        <span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Segoe UI\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./west-european/normal/latest.woff2<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"woff2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./west-european/normal/latest.woff<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"woff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./west-european/normal/latest.ttf<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"truetype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span><br>    <span class=\"token property\">font-display</span><span class=\"token punctuation\">:</span> optional<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Take advantage of system fonts is also a good trick to improve the performance of the web page:</p>\n<pre class=\"language-css\"><code class=\"language-css\">Sans-serif<br><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> -apple-system<span class=\"token punctuation\">,</span> BlinkMacSystemFont<span class=\"token punctuation\">,</span> avenir next<span class=\"token punctuation\">,</span> avenir<span class=\"token punctuation\">,</span> segoe ui<span class=\"token punctuation\">,</span> helvetica neue<span class=\"token punctuation\">,</span> helvetica<span class=\"token punctuation\">,</span> Cantarell<span class=\"token punctuation\">,</span> Ubuntu<span class=\"token punctuation\">,</span> roboto<span class=\"token punctuation\">,</span> noto<span class=\"token punctuation\">,</span> arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span><br><br>Serif<br><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Iowan Old Style<span class=\"token punctuation\">,</span> Apple Garamond<span class=\"token punctuation\">,</span> Baskerville<span class=\"token punctuation\">,</span> Times New Roman<span class=\"token punctuation\">,</span> Droid Serif<span class=\"token punctuation\">,</span> Times<span class=\"token punctuation\">,</span> Source Serif Pro<span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">,</span> Apple Color Emoji<span class=\"token punctuation\">,</span> Segoe UI Emoji<span class=\"token punctuation\">,</span> Segoe UI Symbol<span class=\"token punctuation\">;</span><br><br>Mono<br><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Menlo<span class=\"token punctuation\">,</span> Consolas<span class=\"token punctuation\">,</span> Monaco<span class=\"token punctuation\">,</span> Liberation Mono<span class=\"token punctuation\">,</span> Lucida Console<span class=\"token punctuation\">,</span> monospace<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"images\">Images <a class=\"direct-link\" href=\"#images\">#</a></h3>\n<p>For image, consider to use WEBP or AVIF for smaller sizes. Use suitable image sizes for each purpose and for each type of display using picture tag with srcset and sizes.</p>\n<p>Image might cause issues with layout shift, hence consider to set its size (set for mobile) to a fixed number. Enable <code>async decoding</code> and <code>lazy loading</code> for better performance. But for the above-of-the-fold image, lazy loading should be disabled because we want it to be loaded as fast as it can to reduce the First Content Paint time.</p>\n<p>For the above-of-the-fold image, disable lazy loading, set the size fits the sizes of mobile.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>picture <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"object-center object-cover w-full\"</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>source sizes<span class=\"token operator\">=</span><span class=\"token string\">\"50vw\"</span> srcset<span class=\"token operator\">=</span><span class=\"token string\">\"https://res.cloudinary.com/pthethanh/image/upload/v1636264048/effective-options/options-w1280.webp 1280w,https://res.cloudinary.com/pthethanh/image/upload/v1636264049/effective-options/options-w640.webp 640w,https://res.cloudinary.com/pthethanh/image/upload/v1636264049/effective-options/options-w320.webp 320w\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"image/webp\"</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>img decoding<span class=\"token operator\">=</span><span class=\"token string\">\"async\"</span> width<span class=\"token operator\">=</span><span class=\"token string\">\"359\"</span> height<span class=\"token operator\">=</span><span class=\"token string\">\"240\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"object-center object-cover bg-none w-full mb-2\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://res.cloudinary.com/pthethanh/image/upload/v1636264047/effective-options/options-worg.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"unsplash/Victoriano Izquierdo\"</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>picture<span class=\"token operator\">></span></code></pre>\n<p>For other types images in the article, enable lazy loading to avoid resource blocking issues.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>picture <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"object-center object-cover w-full\"</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>source sizes<span class=\"token operator\">=</span><span class=\"token string\">\"50vw\"</span> srcset<span class=\"token operator\">=</span><span class=\"token string\">\"https://res.cloudinary.com/pthethanh/image/upload/v1636264048/effective-options/options-w1280.webp 1280w,https://res.cloudinary.com/pthethanh/image/upload/v1636264049/effective-options/options-w640.webp 640w,https://res.cloudinary.com/pthethanh/image/upload/v1636264049/effective-options/options-w320.webp 320w\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"image/webp\"</span><span class=\"token operator\">></span><br>  <span class=\"token operator\">&lt;</span>img decoding<span class=\"token operator\">=</span><span class=\"token string\">\"async\"</span> loading<span class=\"token operator\">=</span><span class=\"token string\">\"lazy\"</span> width<span class=\"token operator\">=</span><span class=\"token string\">\"359\"</span> height<span class=\"token operator\">=</span><span class=\"token string\">\"240\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"object-center object-cover bg-none w-full mb-2\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://res.cloudinary.com/pthethanh/image/upload/v1636264047/effective-options/options-worg.jpg\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"unsplash/Victoriano Izquierdo\"</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>picture<span class=\"token operator\">></span></code></pre>\n<h3 id=\"requests-count\">Requests Count <a class=\"direct-link\" href=\"#requests-count\">#</a></h3>\n<p>Keep the number of requests from browsers to the server low and remove all the unnecessary requests. Always keep response content small to improve performance.</p>\n<p>...to be continued...</p>\n",
      "date_published": "2022-05-12T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/any/",
      "url": "https://thefortunedays.com/articles/any/",
      "title": "any",
      "content_html": "<p>The introduction of <code>any</code>as an alias for<code>interface{}</code> is one of the most interesting changes in Go 1.18, beside generics and fuzzing.</p>\n<p>For a long time people complained a lot about the name <code>interface{}</code> which is quite confusing for beginners, and the introduction of <code>any </code>completely resolved that issue. According to the Go team, <code>any</code> is equal to<code> interface{}</code> in all ways. That means you can replace <code>interface{}</code> by <code>any </code>in any case. Any is easier to understand and easier to write as well.</p>\n<p>So, instead of writing:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>You now can write:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">...</span>any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Or with generics:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> Print<span class=\"token punctuation\">[</span>T any<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">...</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>It's clear to see that &quot;print any&quot; is much easier to understand than &quot;print interface{}&quot;.</p>\n<p>And for those who want to replace <code>interface{}</code> by <code>any </code>in legacy code, you can use <code>gofmt </code>to quickly do it for you:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">gofmt -r <span class=\"token string\">\"interface{} -> any\"</span> -w <span class=\"token builtin class-name\">.</span></code></pre>\n<p>It's cool! But you might ask &quot;But any is just interface{}?&quot;. The answer is &quot;Yes, in all ways!&quot;. No magic here! It's just the name that makes more sense!</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> any <span class=\"token operator\">=</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2022-03-23T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/reading/",
      "url": "https://thefortunedays.com/articles/reading/",
      "title": "Reading",
      "content_html": "<p>When I was a child, I liked reading books so much. I read everything I have around me. It could be a comic I got from my friends or from my teacher. It could be a novel I got from my brothers or even it's the Bible I got from my parents - that's why there's a time my Mother thought I’d liked to be a priest ^_^.</p>\n<p>I don't know why I love reading that much. I can stay at home reading from the morning till the afternoon and still not feeling enough. My family was really poor at the time and hence there was no money for buying books, but luckily I got some from friends and teachers. Every time I got a book I tried to read everything in one day and give it back. That was a really great time in my life.</p>\n<p>The great thing about books is they showed me what I've not known before. It opened a whole new world I've never seen before. Not only knowledge, but also a whole new level of emotion.</p>\n<p>Even at the time I was still very young, but the books I've read gave me multiple beautiful worlds of emotions. That can be a fun moment when I was reading a comic for kids, it can be a sad moment when a boy failed to protect his love. It can also be an inspirational moment when a boy struggled to fight for his future and then finally made a victory over all the obstacles on his journey. Sometimes, a book is also a window to a new world where I can escape reality and live the dream life for a while. It gives me hope and energy to overcome obstacles on my journey to success in real life.</p>\n<p>Those kinds of emotions when reading are really beautiful. Now I am much older, but still love reading so much. But it’s kind of hard to find the exact excitement as when I was a child. Most of the time I read nowadays is for obtaining knowledge on the field I’m working on. Hence I moved from reading books to reading blogs and articles since they are faster to read and obtain information.</p>\n<p>I like holding a real book for reading. It gives me full concentration. I like the smell, the color and the moment when touching the paper of the real book. It's just simply beautiful.</p>\n<p>There's a time when I liked to read books in cafes, it's a nice place to read - with coffee, light music and good views, but holding a real book at a cafe in Vietnam is not a common thing. People will look at you like an alien and hence sometimes it's very uncomfortable and distracting as well. So later on I switched to reading on a Kindle Paper White which I found is also a good option.</p>\n<p>I found the Kindle Paper White is a very good device for reading. The design is super cool and the reading experience is nearly like reading a real book except it doesn't smell like a book. It's still more distracting compared to real books but much better compared to phones and computers. It's the greatest device I've ever bought.</p>\n<p>Regardless of reading on what kind of devices, reading is always interesting and I think the joy of reading is the greatest gift I've ever been given. Life is still going on and there's still time for reading....</p>\n",
      "date_published": "2022-01-13T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/effective-options/",
      "url": "https://thefortunedays.com/articles/effective-options/",
      "title": "Effective Options",
      "content_html": "<p><strong>Summary</strong>: Organizing options in API is very important. We can use setters or builders, but options as functions and options as an interface are better approaches. They are much more beautiful , flexible and easier to use for the end users.</p>\n<p>When building a library, we normally try to think how the other developers would use our code and try to provide as many APIs as possible. But sometimes, exposing too many APIs would be very confusing. Or even worse, we failed to provide what our users need, but exposing too many APIs that they don't even need. Hence organizing what we expose and how they should be exposed is really important.</p>\n<p>Normally, what we expose to the end users are either constructors or methods. Some parameters are required and some are optional. Since we want to expose as many APIs as we can for the end users, we will end up having a lot of variants of the same API.</p>\n<p>Consider the struct below, where <code>host</code> is required but others are optional:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Cache <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\thost         <span class=\"token builtin\">string</span><br>\tusername     <span class=\"token builtin\">string</span><br>\tpassword     <span class=\"token builtin\">string</span><br>\treadTimeout  time<span class=\"token punctuation\">.</span>Duration<br>\twriteTimeout time<span class=\"token punctuation\">.</span>Duration<br><span class=\"token punctuation\">}</span></code></pre>\n<p>The easiest way is to expose everything in 1 single constructor, but it's very confusing for users since it's hard to know which ones are required and which ones are optional. Hence we might end up having multiple versions of the constructor as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> readTimeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> readTimeout<span class=\"token punctuation\">,</span> writeTimeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre>\n<p>Unfortunately, Go doesn't support method overloading, hence we have to give each of them a different names:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token keyword\">func</span> <span class=\"token function\">NewWithReadTimeout</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> readTimeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token keyword\">func</span> <span class=\"token function\">NewWithUserPass</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token keyword\">func</span> <span class=\"token function\">NewWithUserPassAndTimeouts</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> readTimeout<span class=\"token punctuation\">,</span> writeTimeout time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre>\n<p>Imagine having 20 optional parameters, naming them is really a nightmare and we might fall into some really bad names. We definitely need a better approach, and some one might suggest using setters.</p>\n<h3 id=\"setters\">Setters <a class=\"direct-link\" href=\"#setters\">#</a></h3>\n<p>With setters, we can improve it a little bit to distinguish the required and optional parameters by putting the required parameters in the constructor <code>New</code> and other optional parameters can be provided by setters. The below block of code show how nice the code is with the setters approach:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache<br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SetUserPass</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> pass <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SetReadTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">SetWriteTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/Vk_QyLaUR65\">Playground</a></p>\n<p>The code looks just beautiful! We can see setters can resolve the problem we have previously with our constructors. But how can we apply it to functions and methods? Consider the below method of the <code>Cache</code> service, where the <code>ttl</code> is optional.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ttl time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></code></pre>\n<p>The API looks OK but there is just one thing ugly. That is even if you don't want to use TTL, you still need to pass a value into the function. What bothers the developer is that he doesn't know whether he should pass -1, or 0 in case he doesn't want his data to be expired. This can be addressed with good documentation or even by adding 2 version of the method:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><br><span class=\"token function\">SetWithTTL</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ttl time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span></code></pre>\n<p>But what if we have many options besides TTL? For example, Set command can be able to use its own token for authentication? This solution would lead us to defining a lot of variants of the set commands like what we faced with our constructor.</p>\n<p>One solution to address the above problem is provide them a parameter struct where the developer can set the parameters he needs. Apply the same approach as what we have done for constructors:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SetRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tk   <span class=\"token builtin\">string</span><br>\tv   <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\tttl time<span class=\"token punctuation\">.</span>Duration<br>\ttok <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SetRequest <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SetRequest<span class=\"token punctuation\">{</span><br>\t\tk<span class=\"token punctuation\">:</span> k<span class=\"token punctuation\">,</span><br>\t\tv<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>SetRequest<span class=\"token punctuation\">)</span> <span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span>ttl time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tr<span class=\"token punctuation\">.</span>ttl <span class=\"token operator\">=</span> ttl<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>SetRequest<span class=\"token punctuation\">)</span> <span class=\"token function\">SetToken</span><span class=\"token punctuation\">(</span>tok <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tr<span class=\"token punctuation\">.</span>tok <span class=\"token operator\">=</span> tok<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>SetRequest<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// TODO implement me.</span><br>\t<span class=\"token comment\">// if r.ttl > 0 {...}</span><br>\t<span class=\"token comment\">// if r.tok != \"\" {...}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>And this is how our end users use it:</p>\n<pre class=\"language-go\"><code class=\"language-go\">c <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">)</span><br>c<span class=\"token punctuation\">.</span><span class=\"token function\">SetUserPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span><br>c<span class=\"token punctuation\">.</span><span class=\"token function\">SetReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with TTL only</span><br>r <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><br>r<span class=\"token punctuation\">.</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with ttl and token</span><br>r1 <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><br>r1<span class=\"token punctuation\">.</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br>r1<span class=\"token punctuation\">.</span><span class=\"token function\">SetToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/az5mODuwnAy\">Playground</a></p>\n<p>The above code is OK but not really beautiful, since we have to create a new SetRequest and set its properties in separate lines which sometimes I feel so uncomfortable to do. We can do it even better, with builders.</p>\n<h3 id=\"builders\">Builders <a class=\"direct-link\" href=\"#builders\">#</a></h3>\n<p>The idea of builders is quite simple, a setter of a struct return itself:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SetRequest <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>SetRequest<span class=\"token punctuation\">{</span><br>\t\tk<span class=\"token punctuation\">:</span> k<span class=\"token punctuation\">,</span><br>\t\tv<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>SetRequest<span class=\"token punctuation\">)</span> <span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span>ttl time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SetRequest <span class=\"token punctuation\">{</span><br>\tr<span class=\"token punctuation\">.</span>ttl <span class=\"token operator\">=</span> ttl<br>\t<span class=\"token keyword\">return</span> r<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>SetRequest<span class=\"token punctuation\">)</span> <span class=\"token function\">SetToken</span><span class=\"token punctuation\">(</span>tok <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>SetRequest <span class=\"token punctuation\">{</span><br>\tr<span class=\"token punctuation\">.</span>tok <span class=\"token operator\">=</span> tok<br>\t<span class=\"token keyword\">return</span> r<br><span class=\"token punctuation\">}</span></code></pre>\n<p>The same thing can be applied to constructor. And here is how we use it:</p>\n<pre class=\"language-go\"><code class=\"language-go\">c <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetUserPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with TTL only</span><br>r <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with ttl and token</span><br>r1 <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/a8Gsb4PGAYy\">Playground</a></p>\n<p>The above code looks just beautiful. But there is still one thing I don't really like: that is the prefix &quot;Set&quot; before every single setter. Sometimes I just remove the prefix &quot;Set&quot; from the builders' names, but someone will argue that it violates the name convention. To be honest, in case of a builder, sometimes I don't care and just remove the prefix from the names to make it more beautiful when using:</p>\n<pre class=\"language-go\"><code class=\"language-go\">c <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UserPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with TTL only</span><br>r <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set with ttl and token</span><br>r1 <span class=\"token operator\">:=</span> <span class=\"token function\">NewSetRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Token</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/vwo3N8jMjWv\">Playground</a></p>\n<p>It looks better but to be honest, I don't really like constructing request param and setting everything like that. We can do it better with options as a function.</p>\n<h3 id=\"options-as-functions\">Options As Functions <a class=\"direct-link\" href=\"#options-as-functions\">#</a></h3>\n<p>The idea of options as functions is pretty simple, options are setting up via functions. We force people to provide required parameters directly in the constructor or directly in the method/function, and optionally provide the advanced options using variadic parameters.</p>\n<p>Instead of using setters, we will use functions for setting up the struct, here is how we do with the constructor, the same can be applied for methods/functions as well:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>Option<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache <span class=\"token punctuation\">{</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Cache<span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">:</span> host<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> opts <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">opt</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> c<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">UserPass</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> pass <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> user<br>\t\tc<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> pass<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">ReadTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> d<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">WriteTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>writeTimeout <span class=\"token operator\">=</span> d<br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/HLkzdwq6LVF\">Playground</a></p>\n<p>And here is how we use it:</p>\n<pre class=\"language-go\"><code class=\"language-go\">c <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Token</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Just simply beautiful! No more confusing, required parameters are forced to provide, optional parameters are provided as needed.</p>\n<p>I think this approach is simple enough to implement and I'm currently using it for production code. But there is still another interesting approach, that is to provide options as an interface.</p>\n<h3 id=\"options-as-an-interface\">Options As An Interface <a class=\"direct-link\" href=\"#options-as-an-interface\">#</a></h3>\n<p>The idea of options as an interface is that everything can be considered as an option if it implements our option interface, so instead of using functions, we will use interface as following:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Option <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> optionFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f optionFunc<span class=\"token punctuation\">)</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>host <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> opts <span class=\"token operator\">...</span>Option<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cache <span class=\"token punctuation\">{</span><br>\tc <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Cache<span class=\"token punctuation\">{</span>host<span class=\"token punctuation\">:</span> host<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> opts <span class=\"token punctuation\">{</span><br>\t\topt<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> c<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">UserPass</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> pass <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">optionFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> user<br>\t\tc<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> pass<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">ReadTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">optionFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> d<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">WriteTimeout</span><span class=\"token punctuation\">(</span>d time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token function\">optionFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Cache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tc<span class=\"token punctuation\">.</span>writeTimeout <span class=\"token operator\">=</span> d<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/v25vpjS_-Gs\">Playground</a></p>\n<p>This approach produces the same APIs for the end users as the previous one:</p>\n<pre class=\"language-go\"><code class=\"language-go\">c <span class=\"token operator\">:=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UserPass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Token</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/v25vpjS_-Gs\">Playground</a></p>\n<p>Although this approach looks a little bit more complicated than the options as functions approach, but it uses an interface hence it will be more flexible for end users to extend our library to have more customized options as their needs.</p>\n<h3 id=\"summary\">Summary <a class=\"direct-link\" href=\"#summary\">#</a></h3>\n<p>All the provided above approaches proved that everyone can write beautiful APIs with just a little effort. Some of you might like <code>builders</code>, but I would suggest you use <code>options as functions</code> or <code>options as an interface</code> since they are more beautiful and more flexible than the previous ones.</p>\n<p>For more examples, look at packages <a href=\"https://github.com/pthethanh/micro/tree/master/cache\">cache</a>, <a href=\"https://github.com/pthethanh/micro/tree/master/broker\">broker</a> or <a href=\"https://github.com/pthethanh/micro/tree/master/server\">server</a> of my <a href=\"https://github.com/pthethanh/micro\">micro</a> toolkit.</p>\n",
      "date_published": "2021-11-07T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/they-dont-even-know-the-fundamentals/",
      "url": "https://thefortunedays.com/articles/they-dont-even-know-the-fundamentals/",
      "title": "They Don&#39;t Even Know The Fundamentals",
      "content_html": "<p>&quot;They don't even know the fundamentals!&quot;. That's what I often hear from my colleagues after their trips to universities for interviewing students for their projects. I've also experienced this situation myself so many times.</p>\n<p>A lot of students nowadays just want to work on AI/ML, Blockchain projects. They just simply turn around and never sat down for an interview after knowing that we're looking for developers who will work on payment gateway, network management system, eCommerce,...</p>\n<p>Some of them were patient enough to sit down for an interview, but still repeat that they wanted to work on AI/ML, Blockchain,... since &quot;it's the 4.0 revolution now&quot;. To be honest, I'm totally fine with that. Everyone has a dream and that's OK.</p>\n<p>But when it came to the technical interview, what I wanted them to do was just &quot;giving a list of numbers, sort them by ascending using an algorithm you knew&quot;. That's it! Nothing more and nothing less. Sadly, some didn't even know how to do that! Most of them could explain that we need 2 nested loops and swap numbers if one is bigger than the other. That's cool! It's exactly what they have been taught.</p>\n<p>Everything was great until I asked &quot;could you please show me how to swap 2 numbers using a programming language you're most familiar with&quot;? This is the question I've gotten a lot of &quot;umh&quot; &quot;ah&quot; from them so far. A lot of them failed to answer that simple question! They just know there should be a method <code>swap</code> and you need to provide 2 numbers and it's done. Some knew that we can use temporary variable but failed to provide the steps. To be honest, I was very frustrated. If they could answer that simple question, it's likely they would be hired...but a lot of them failed.</p>\n<p>I think having a big dream is cool. Universities can &quot;inject&quot; those dreams in to the students' heads. But at the same time, we also need to teach them to know where they are, and need to tell them that they have to start learning the fundamentals first. Without the fundamental knowledge, one just simply cannot do anything bigger.</p>\n",
      "date_published": "2021-11-02T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-interface/",
      "url": "https://thefortunedays.com/articles/go-interface/",
      "title": "Interface Explained",
      "content_html": "<p><img src=\"/img/remote/articles/go-interface/go-interface-intro.svg\" alt=\"What is interface?\"></p>\n<p><strong>Summary</strong>: Interface values are stored as eface &amp; iface during runtime. Go keeps track of struct &amp; interface mapping in an internal list called itabTable. This list is built both at compile time and at runtime and will be used for checking if a struct implements an interface.</p>\n<p><em>Note: this post is to explain the illustration that I have in my previous post <a href=\"https://pthethanh.herokuapp.com/blog/articles/golang-interface\">interface{}</a>.</em></p>\n<p>Interface is the most interesting in Go which differentiates it from the other programming languages. Most of us use it a lot in our code but it seems not everybody understands how it works under the hood. In this post I will dig into the code of the runtime a little bit to see how it works. To avoid the complexity, the code shown in this post might hide some detail from the real code.</p>\n<p>The most interesting thing about interface in Go is that it is just a set of method signatures. Or we can think of it as a set of behaviors we expect from a dependency (<em>some people might call it as a <code>contract</code> between two or more components</em>). Let's take a look at the <code>fmt.Stringer</code> interface.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Stringer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>For a struct to be called as <code>implements</code> the fmt.Stringer interface, what it needs is just having the same method signature with the interface.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Number <span class=\"token builtin\">int</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n Number<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>It's just as simple as that! A struct is called <code>implements</code> an interface when and only when it defines the same set of method signatures that the interface defines. In this manner, the Go interface is really a duck typing.</p>\n<blockquote>\n<p>If it walks like a duck and it quacks like a duck, then it must be a duck</p>\n<p>wikipedia</p>\n</blockquote>\n<p>Requiring no explicit declaration at compile time makes the Go interface really powerful compared to other programming languages like Java. Java requires an explicit keyword implements on the class declaration at compile time, and this means you have to import the library that defines the interface and all of its dependencies just to implement it:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> fmt<span class=\"token punctuation\">.</span>Stringer<span class=\"token punctuation\">;</span><br><br>public class MyObject implements Stringer <span class=\"token punctuation\">{</span><br>  public String <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>With a language like Java, it's easy for the compiler and the runtime to know if a class implements an interface or not since it has the explicit <code>implements</code> keyword in the class and can easily build a mapping table to check both at compile time and runtime. But Go doesn't require any explicit declaration, how does it check if a type implements an interface? Does it happen at compile time? Or does it happen at runtime?</p>\n<p>The answer is both! Go checks type conversion at compile time for explicit conversions and checks at runtime for implicit conversions.</p>\n<p>That means the below explicit conversion will be checked at compile time:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> str fmt<span class=\"token punctuation\">.</span>Stringer <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// check at compile time.</span></code></pre>\n<p>But for any implicit conversion like the following block of code, the check will be done at runtime when that specific block of code is invoked:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">printIt</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span>Stringer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span> <span class=\"token comment\">// check at runtime.</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">return</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>For both the compile time and runtime type conversion checks, the information will be stored in an internal list called <code>itabTable</code>. This itabTable list keeps track information of all the type conversions and assertions. It's organized and used as a cache for speeding up the performance of any future type conversion and assertions.</p>\n<p>To understand the itabTable, let's take a look at the type system in the runtime first.</p>\n<p>In the runtime, the all the supported types are defined in <a href=\"https://golang.org/src/runtime/type.go\">runtime/type.go</a> and <a href=\"https://golang.org/src/runtime/typekind.go\">runtime/typekind.go</a>, these types cover all the basic types as well as struct and interface types:</p>\n<pre class=\"language-go\"><code class=\"language-go\">kindBool<br>kindInt<br><span class=\"token operator\">...</span><br>kindFloat64<br>kindArray<br>kindChan<br>kindFunc<br><span class=\"token operator\">...</span><br>kindInterface<br>kindStruct<br><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre>\n<p>During runtime, interface values will be stored in an <code>eface</code> if it's an empty interface, or in an <code>iface</code> if it has methods. The <code>_type</code> holds information of the type of the value the interface is holding, and the <code>data</code> is a pointer to the real data. In case of the <code>iface</code>, the <code>itab</code> holds information of both the interface and its target type, and the <code>fun[0]</code> indicates whether the type implements the interface or not. fun[0]!=0 means the type implements the interface.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> iface <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\ttab  <span class=\"token operator\">*</span>itab<br>\tdata unsafe<span class=\"token punctuation\">.</span>Pointer<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> eface <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\t_type <span class=\"token operator\">*</span>_type<br>\tdata  unsafe<span class=\"token punctuation\">.</span>Pointer<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> itab <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tinter <span class=\"token operator\">*</span>interfacetype<br>\t_type <span class=\"token operator\">*</span>_type<br>    <span class=\"token operator\">...</span><br>    <span class=\"token operator\">...</span><br>\tfun   <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">uintptr</span> <span class=\"token comment\">// variable sized. fun[0]==0 means _type does not implement inter.</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The below figure show how the types are structured in the runtime:</p>\n<p><img src=\"/img/remote/articles/go-interface/go-interface-explained.svg\" alt=\"Interface Explained\"></p>\n<p>So, the <code>itab</code> is used for holding the mapping between an interface and a struct, and holds information whether the struct implements the interface or not via its property: fun[0]. Let's take a look at the process of building the itab and the itabTable.</p>\n<p>Consider the below block of code, where there is a type conversion between an interface and a struct:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> str fmt<span class=\"token punctuation\">.</span>Stringer <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The above block of code would trigger a type conversion of runtime code and the method <code>getitab</code> would be called during that process (see <a href=\"https://golang.org/src/runtime/iface.go\">runtime/iface.go</a>). Basically, getitab would first look for the information in the itabTable, if the information is not there, it would construct a new itab and will store it back to the itabTable for future check. The below figure show how the itab is constructed:</p>\n<p><img src=\"/img/remote/articles/go-interface/go-itable.svg\" alt=\"itable\"></p>\n<p>As we can see in the above figure, Go runtime would scan through the interface and the struct to extract their method definitions and then just simply compare them to see if they match. If the method signatures matched, we can say that the struct implements the interface.</p>\n<p>The process is exactly the same for both type conversions that happen at compile time and runtime. For more detail on how the check happens, the best place to start with is the method <code>getitab</code> in <a href=\"https://golang.org/src/runtime/iface.go\">runtime/iface.go</a>.</p>\n<p>For those who want to debug the Go runtime, the below snip of code is the code that I used for printing the information of the itabTable for debugging purpose:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>itab <span class=\"token operator\">*</span>itab<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type      :\"</span><span class=\"token punctuation\">,</span> itab<span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>itab<span class=\"token punctuation\">.</span>_type<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Interface :\"</span><span class=\"token punctuation\">,</span> itab<span class=\"token punctuation\">.</span>inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>itab<span class=\"token punctuation\">.</span>inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fun[0]:\"</span><span class=\"token punctuation\">,</span> itab<span class=\"token punctuation\">.</span>fun<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>inter <span class=\"token operator\">*</span>interfacetype<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Interface :\"</span><span class=\"token punctuation\">,</span> inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> mt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> inter<span class=\"token punctuation\">.</span>mhdr <span class=\"token punctuation\">{</span><br>\t\tname <span class=\"token operator\">:=</span> inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><br>\t\ttyp <span class=\"token operator\">:=</span> inter<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">typeOff</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">.</span>ityp<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    Method:\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// print type info</span><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>typ <span class=\"token operator\">*</span>_type<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type: \"</span> <span class=\"token operator\">+</span> typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\tx <span class=\"token operator\">:=</span> typ<span class=\"token punctuation\">.</span><span class=\"token function\">uncommon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// fields</span><br>\t<span class=\"token keyword\">switch</span> typ<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">&amp;</span> kindMask <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">case</span> kindStruct<span class=\"token punctuation\">:</span><br>\t\tst <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>structtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> st<span class=\"token punctuation\">.</span>fields <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"        Field : \"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token comment\">// methods</span><br>\tnt <span class=\"token operator\">:=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>mcount<span class=\"token punctuation\">)</span><br>\tmethods <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uintptr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>moff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>nt<span class=\"token punctuation\">:</span>nt<span class=\"token punctuation\">]</span><br>\tj <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><br>\t<span class=\"token keyword\">if</span> nt <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nt<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\tt <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>methods<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><br>\t\tname <span class=\"token operator\">:=</span> typ<span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\ttyp <span class=\"token operator\">:=</span> typ<span class=\"token punctuation\">.</span><span class=\"token function\">typeOff</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>mtyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nameOff</span><span class=\"token punctuation\">(</span>typ<span class=\"token punctuation\">.</span><span class=\"token function\">typeOff</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>mtyp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"        Method: \"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> typ<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>And this is how the itabTable can be printed:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> itab <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> itabTable<span class=\"token punctuation\">.</span>entries <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">if</span> itab <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><br><br>\t\titab<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>So, that's a quick overview of how the interface values are stored and how interface conversion works during the runtime. There are still a lot of interesting things in the Go runtime and we will explore more in the future posts.</p>\n",
      "date_published": "2021-10-28T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/golang-interface/",
      "url": "https://thefortunedays.com/articles/golang-interface/",
      "title": "Interface",
      "content_html": "<p><img src=\"/img/remote/articles/golang-interface/interface.svg\" alt=\"Golang Interface\"></p>\n",
      "date_published": "2021-10-27T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/golang-name-conventions/",
      "url": "https://thefortunedays.com/articles/golang-name-conventions/",
      "title": "Name Conventions In Go",
      "content_html": "<p><strong>Summary</strong>: The ground rules for naming in Go are: use mixedCaps, keep it short and be consistent.</p>\n<p>As a developer, naming is what we do every day, although it is quite easy most of the time, sometime it's really hard to come up with a good name, especially for fresher developers who are still struggling learning the languages. Some developers end up using <code>i</code>, <code>j</code>, <code>v</code>,... for almost everything. Those are good names in some cases but can be very confusing if being used in an inappropriate context.</p>\n<p>Some time developers just want to name their code their own way, this is OK if you work on your side project. But in a project which involve multiple developers, the standard must be respected. Everyone in a same project must follow the same standard, otherwise your code would like like a mess and become super hard to maintain.</p>\n<p>In this post, I would like to provide some simple rules so that you can name your code easier and avoid endless arguments with your colleagues about naming conventions.</p>\n<p>This guideline can be used as a supplement to the name conventions of the Go guideline at <a href=\"https://golang.org/doc/effective_go#names\">effective-go</a>.</p>\n<h3 id=\"project-name\">Project Name <a class=\"direct-link\" href=\"#project-name\">#</a></h3>\n<p>Name your project in lowercase, otherwise it would look really weird in the imports. <a href=\"https://github.com/sirupsen/logrus\">Logrus</a> - a very good structured logging library in Go made this mistake at the beginning and they had to fix it a very hard way. You still can see their README mention about the naming problem today.</p>\n<p>The import <code>github.com/sirupsen/logrus</code> is much better than <code>github.com/Sirupsen/logrus</code></p>\n<p>If your project name is long, use dash or underscore to separate the name. Use <code>effective-go</code> or <code>effective_go</code> instead of <code>effectiveGo</code> or <code>EffectiveGo</code>.</p>\n<h3 id=\"package\">Package <a class=\"direct-link\" href=\"#package\">#</a></h3>\n<p>For package, use singular noun instead of plural. Use <code>user</code> instead of <code>users</code> , <code>notification</code> instead of <code>notifications</code> .</p>\n<p>Use plural noun in case using singular noun causes collision with existing primitive type names. But this should be used with very careful considerations. Some examples from the standard libraries are <code>bytes</code> , <code>errors</code>.</p>\n<p>If your package adds some extension to the current standard libraries, try to use another name instead of using the same name and fool yourselves with import alias. Use <code>contextutil</code> or <code>contextx</code> instead of <code>context</code> , use <code>errorsx</code> instead of <code>errors</code> so that you can use both the packages in your code without defining alias for your imports.</p>\n<p>Try to keep package name short, use lower case, never use mixedCaps for package name and even snake_case should be avoided too. Use <code>contextutil</code> instead of <code>contextUtil</code> or <code>context_util</code> . This is similar why Go name its <code>httputil</code> package, and not <code>httpUtil</code> or <code>http_util</code>.</p>\n<h3 id=\"file-name\">File Name <a class=\"direct-link\" href=\"#file-name\">#</a></h3>\n<p>For file name, try to keep it short, but still meaningful.</p>\n<p>I have seen some developers naming their entry file in Go different from <code>main.go</code>, don't do that! Be different, be intelligent in something that avoid bugs instead.</p>\n<p>Use lower case and use snake_case instead of mixedCaps. So, use <code>server.go</code> , <code>notification.go</code> or <code>notification_server.go</code> instead of <code>notificationServer.go</code>.</p>\n<p>Use underscore instead of dash, dash would make your unit test file looks weird. So, use <code>notification_server.go</code>, <code>notification_server_test.go </code> or <code>repository_mongo.go</code> instead of <code>notification-server.go </code> or <code>notification-server_test.go</code>.</p>\n<p>If there are multiple files for different purposes in a same package, all the files of a same purpose should be prefixed the same way, that way your code would be perfectly aligned in your IDE and super easy to find.</p>\n<h3 id=\"function%2Fmethod\">Function/Method <a class=\"direct-link\" href=\"#function%2Fmethod\">#</a></h3>\n<p>Use mixedCaps for naming your function. Use <code>getArticles</code> or <code>GetArticles</code> instead of <code>get_articles</code> or <code>get-articles</code>.</p>\n<p>Name of a function should reflect what it does. Don't naming your function <code>getArticles</code> but inside the function you also modify it.</p>\n<p>Try to void the word <code>Get</code> from the getters of a struct. Use <code>Name()</code> and <code>SetName(string)</code> instead of <code>GetName()</code> and <code>SetName(string)</code>.</p>\n<p>If a function receives a context, the context must be the first parameter and its name should be <code>ctx</code>.</p>\n<p>Use <code>DeleteArticle(ctx context.Context, id string) error</code> instead of <code>DeleteArticle(id string, myCtx context.Context) error</code>.</p>\n<p>For the method receiver, 2 or 3 letter maybe enough for the name. If you prefer more meaningful name, that's OK but remember to try to shorten them. So, <code>srv</code> or <code>svc</code> are better than <code>server</code>, <code>service</code> or <code>myService</code>. <code>r</code> or <code>repo</code> is better than <code>repository</code> or <code>myRepository</code></p>\n<p>If a function requires only one struct as its request param, <code>req</code> is much better than <code>getArticleRequest</code>. If it requires multiple param, concrete names should be provided but tries to keep them short.</p>\n<p>If a param of a function is a writer, then <code>w</code> is meaningful enough. If it's a reader, <code>r</code> is a good choice.</p>\n<h3 id=\"variable\">Variable <a class=\"direct-link\" href=\"#variable\">#</a></h3>\n<p>Name of variable should be short but should be meaningful enough. So, you can use <code>srv</code> or <code>svc</code> instead of <code>service</code>, <code>server</code> or <code>myService</code>. Use<code>r</code> or <code>repo</code> instead of <code>repository</code> or <code>myRepository</code>.</p>\n<p>Use <code>ctx</code> for <code>context.Context</code>. If it's a new context then <code>newCtx</code> is good enough.</p>\n<p>Use <code>i</code>, <code>j</code> for your indexing of a loop. But what if you have 3 loops? Please don't! Having 3 loops means you should refactor your code.</p>\n<p>Some developers prefer to use <code>rs</code> for naming result of something. This is OK, but in case you have multiple results of different API calls, the name should be more concrete, otherwise it would be really hard to read the code. You can use <code>article</code> if the result is just a single struct represent an article, <code>articles</code> if it's a slice, or <code>searchArticleRs</code> if it's a response struct.</p>\n<h3 id=\"constant\">Constant <a class=\"direct-link\" href=\"#constant\">#</a></h3>\n<p>Constant follows the same rule with variables and functions, hence use mixedCaps for naming. No underscore unless it's generated code. So, use <code>StatusActive</code> instead of <code>STATUS_ACTIVE</code>.</p>\n<p>All constants of same type or represent a same values of something should be named with same prefix for easier to remember.</p>\n<h3 id=\"error\">Error <a class=\"direct-link\" href=\"#error\">#</a></h3>\n<p>Name of error variable should start with <code>Err</code>. Use <code>ErrNotFound</code> instead of <code>NotFoundError</code>. <em>Note that it's <code>Err</code>, not <code>Error</code>.</em></p>\n<p>But when it's an error type, <code>Error</code> should be the suffix of the type name. Use <code>NotFoundError</code> instead of <code>ErrorNotFound</code>.</p>\n<h3 id=\"interfaces\">Interfaces <a class=\"direct-link\" href=\"#interfaces\">#</a></h3>\n<p>The simplest rule for naming interface is adding <code>er</code> into the name of the action/method it represents.</p>\n<p>Here are some examples from the standard library:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Writer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><br>  Reader<br>  Writer<br><span class=\"token punctuation\">}</span></code></pre>\n<p>The standard guideline is easy but sometime you have big interfaces which includes 4 or 5 or even more actions/methods and it's hard to come up with a good name. My recommendation is naming them base on the meaning of the set of the methods/actions they represent.</p>\n<p>If it's all about retrieving/updating data for something, <code>DataProvider</code>, <code>DataAdaptor</code>, <code>DataUpdater</code> are good enough. If you want more concrete names, <code>ArticleDataProvider</code>, <code>ArticleGetter</code>, <code>ArticleUpdater</code>, ... are good names to choose.</p>\n<p>If it's a service that provide a lot of actions for something, maybe <code>Service</code> or <code>Server</code> are good suffixes for the name. So you can use <code>ArticleService</code>, <code>ArticleServer</code>, ...</p>\n",
      "date_published": "2021-08-05T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/bad-code/",
      "url": "https://thefortunedays.com/articles/bad-code/",
      "title": "Bad Code Is Great",
      "content_html": "<p>**Summary.**People complains a lot about bad code. A lot of &quot;what the food&quot; words come out from a developer when he reviews a bad code. But on the other hand, bad code is a great opportunity for me as a developer in a third world country.</p>\n<p>For people who don't know what is a bad code. It's simply a piece of code that when someone looks at it, it makes them feel uncomfortable and eventually produce a lot of &quot;what the food&quot; or &quot;WTF&quot; or whatever a developer can say when he's angry. The more &quot;WTF&quot; words, the worse the code.</p>\n<p>Some pieces of bad code may even turn a developer into crazy mode and eventually leave the project because he cannot stand for it anymore...</p>\n<p>Most of the time bad means &quot;bad&quot; and &quot;no opportunity&quot; but in case of &quot;bad code&quot;, it's a great opportunity for developers in a third world country like me. It means there are some shits in someone's products and there is a chance they will hire me to &quot;clean that shit&quot;. And this is where I make money from.</p>\n<p>&quot;Clean that shit&quot; is a terrible job for people in developed country but for me it's a great opportunity. It means I will have money for taking care of my family. And this is what most of developers in a third world country are looking for, especially during the COVID-19 pandemic - when making money is hard.</p>\n<p>But actually &quot;clean that shit&quot; is not that bad. It's not the real dirty thing you can imagine, it's just a state in your mind and you can clean it with your dedication and hard work, to make it better and prettier. And making something better and prettier is a greatest job ever, not just for people in a third world country but also for people in a developed country.</p>\n<p>So, what can I say? Be positive, makes money and takes care of your family!</p>\n",
      "date_published": "2021-05-10T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/measure-execution-time/",
      "url": "https://thefortunedays.com/articles/measure-execution-time/",
      "title": "Measure Execution Time",
      "content_html": "<p><strong>Summary</strong>: Measuring time is a very important step to optimize performance or identify a performance issue. This article shows you how easy implementing it in Go.</p>\n<p>In Go, the simplest way to measure execution time is using the combination of <code>time.Now()</code> and <code>time.Since()</code>. <code>time.Now() </code>records the current time and <code>time.Since()</code> calculates the total time since a specific time.</p>\n<p>For measure execution time of a block of code, we just need to do:</p>\n<pre class=\"language-go\"><code class=\"language-go\">t <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// Do something</span><br>d <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></code></pre>\n<p>If we want to measure the execution time of the whole function, the simplest way is to wrap it with a <code>defer</code>:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\td <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution time: %v\\n\"</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Do something</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>The above block of code is even better if we break the time measurement logic into a utilities function so that it can be reused across our code base:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span>context <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\td <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution time of %s: %v\\n\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token comment\">// Do something</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"multiple-steps\">Multiple Steps <a class=\"direct-link\" href=\"#multiple-steps\">#</a></h2>\n<p>In reality, our function or block of code may have multiple steps inside and we may want to measure their performance. The code can be run consecutively or concurrently. But let consider the below function which has multiple execution steps run consecutively first:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Apply the same principle as our very first example, the time measurement code would look like this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep1\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><br>\tt <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep2\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><br>\tt <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep3\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/xBVzw4z1C2b\">Code</a></p>\n<h2 id=\"concurrency\">Concurrency <a class=\"direct-link\" href=\"#concurrency\">#</a></h2>\n<p>What if our code uses goroutine? Consider the below function where <code>doStep2</code> runs inside a goroutine:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>We can see that after <code>doStep1</code> , <code>doStep2 </code>and <code>doStep3</code> will run concurrently.</p>\n<p>Base on the execution flow, <code>doStep2 </code>and <code>doStep3 </code>start at the same time (almost). Hence we can do this:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tt <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep1\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><br>\tt <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep2\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token function\">measureTime</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep3\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/y-cJRQR2fEj\">Code</a></p>\n<h2 id=\"production-recommendation\">Production Recommendation <a class=\"direct-link\" href=\"#production-recommendation\">#</a></h2>\n<p>The <code>measureTime</code> utilities function is cool but still has some inconvenient when using in production. We might not only want to log the information but also want to save it into database or send it to some monitoring services. Hence we need a better helper utilities to serve those purposes. Luckily, building a helper in this case is very easy.</p>\n<p>Let call a function or a block of code as an <code>execution context</code>, each execution context may have one or multiple steps - which we will call as a <code>span</code>.</p>\n<p>Base on the above execution flow, we can model information of a execution context as below:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Record <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Context is name of the context.</span><br>\tContext  <span class=\"token builtin\">string</span>                   <span class=\"token string\">`json:\"context\"`</span><br>    <span class=\"token comment\">// Duration hold execution time of the whole context.</span><br>\tDuration time<span class=\"token punctuation\">.</span>Duration            <span class=\"token string\">`json:\"duration\"`</span><br>    <span class=\"token comment\">// Spans hold the execution time of each span in the context.</span><br>\tSpans    <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>time<span class=\"token punctuation\">.</span>Duration <span class=\"token string\">`json:\"spans\"`</span><br>    <span class=\"token comment\">// Meta hold metadata of the context for tracing purpose.</span><br>\tMeta     <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>   <span class=\"token string\">`json:\"meta\"`</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Let call our helper as <code>TimeRecorder</code>. The <code>TimeRecorder </code>would need to serve for both consecutive or concurrent execution contextes. Hence it should look like:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> TimeRecorder <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// Done records the execution time of the given span since the last time Done was called.</span><br>\t<span class=\"token comment\">// Done updates the internal clock of the recorder.</span><br>\t<span class=\"token function\">Done</span><span class=\"token punctuation\">(</span>span <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// Last return the last recorded time of the internal clock of the recorder.</span><br>\t<span class=\"token comment\">// Last is normally used with DoneSince.</span><br>\t<span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> time<span class=\"token punctuation\">.</span>Time<br>\t<br>\t<span class=\"token comment\">// DoneSince records the execution time of the given span since the given time.</span><br>\t<span class=\"token comment\">// Note that DoneSince doesn't update the internal clock of the recorder.</span><br>\t<span class=\"token comment\">// Normally it is used in case there is a span run concurrently with the others.</span><br>\t<span class=\"token function\">DoneSince</span><span class=\"token punctuation\">(</span>span <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> t time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// Info return time execution info of the context and detail</span><br>\t<span class=\"token comment\">// of the recorded spans at the moment.</span><br>\t<span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Record<br><span class=\"token punctuation\">}</span></code></pre>\n<p>A simple implementation of the <code>TimeRecorder </code>can be found in this <a href=\"https://github.com/pthethanh/micro/blob/master/util/timeutil/recorder.go\">repo</a>.</p>\n<p>By using the library above, our code in case of consecutive run would look much simpler:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tr <span class=\"token operator\">:=</span> timeutil<span class=\"token punctuation\">.</span><span class=\"token function\">NewRecorder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep1\"</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep2\"</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep3\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/JN0decXRX_D\">Playground</a></p>\n<p>And in case of concurrency, the code would look much simpler too:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tr <span class=\"token operator\">:=</span> timeutil<span class=\"token punctuation\">.</span><span class=\"token function\">NewRecorder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doSomething\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep1\"</span><span class=\"token punctuation\">)</span><br><br>\tlast <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">doStep2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\tr<span class=\"token punctuation\">.</span><span class=\"token function\">DoneSince</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep2\"</span><span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">doStep3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doStep3\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/dM0T8_mGAZU\">Playground</a></p>\n<p>The result would look like:</p>\n<pre class=\"language-go\"><code class=\"language-go\">context<span class=\"token punctuation\">:</span>doSomething<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">:</span>4s<span class=\"token punctuation\">,</span> spans<span class=\"token punctuation\">:</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>doStep1<span class=\"token punctuation\">:</span>1s doStep2<span class=\"token punctuation\">:</span>2s doStep3<span class=\"token punctuation\">:</span>3s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> meta<span class=\"token punctuation\">:</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"summary\">Summary <a class=\"direct-link\" href=\"#summary\">#</a></h2>\n<p>With just some very basic technique we are able build a very useful time measurement helper in Go. You can take this to further steps by integrate it into a middleware to measure performance of a REST API call or gRPC call.</p>\n<p>For any discussion, please leave comments below.</p>\n",
      "date_published": "2021-04-19T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/100-stars/",
      "url": "https://thefortunedays.com/articles/100-stars/",
      "title": "100 Stars On GitHub",
      "content_html": "<p>After more than 1 year on <a href=\"https://github.com/pthethanh\">GitHub</a>, I've gotten more than 100 stars. In this post, I will tell you what I have learnt from that journey. From my journey, I hope that you can learn something and might do something helpful for your career.</p>\n<h2 id=\"shape-your-goals\">Shape Your Goals <a class=\"direct-link\" href=\"#shape-your-goals\">#</a></h2>\n<p>When I was started more than 1 year ago, I didn't know how to get started. There are a lot of questions came to my head at the time. What should I build? What is the standard of a repository on GitHub? How do people know about my works? How other professional developers are doing? Even a very basic question that I need to answer to myself at the time is &quot;Is it worthy to spend time on GitHub? Spend time for building something for free?&quot;. There was also a feeling that no one will read my code because I'm not an expert on this....</p>\n<p>To be honest, it's tired to answer those questions even to yourselves. But those are very important questions, since it will help you to know your purpose and keep you keen to your goal for a long time.</p>\n<p>Fortunately, I finally determined 2 of my goals:</p>\n<ul>\n<li>Build to learn: continuous improvement, be hungry to knowledges.</li>\n<li>Share to learn: feedback is great way to know where you are and best channel ever to learn.</li>\n</ul>\n<p>But there is a another bigger goal that I says to no one until today: one day, one of my opensource project will be used in a successful project. I tricked myself to this beautiful dream to make myself keep going. Most people give up at this stage, hence please be strong and your effort will be worth it.</p>\n<p>I started my journey by posting a document about <a href=\"https://github.com/golovers/effective-go\">effective-go</a> that I have previously collected from different sources. It's a list of idiomatic and best practices that I applied to my projects. My purpose of posting it is just for easier to share with my team, but turn out it is where I get most of the stars.</p>\n<p>On the journey, I have a lot of difficulties and also many lessons for me as well. The first lesson is &quot;It's just a chance to learn and discover ideas&quot;</p>\n<h2 id=\"just-a-chance-to-learn-and-discover-ideas\">Just A Chance To Learn And Discover Ideas <a class=\"direct-link\" href=\"#just-a-chance-to-learn-and-discover-ideas\">#</a></h2>\n<p>You're not always working on the project you love, not always work on the technologies you love. This happens all the time when you work on a outsourcing companies where you are staffed to many projects during a very short time and the technologies depend on your customers' decisions. Hence working on a side project is great way to explore new ideas, new technologies. That's a great way to keep up to date with the technology world where new technologies emerged every seconds.</p>\n<h2 id=\"a-tool-to-motivate-yourselves\">A Tool To Motivate Yourselves <a class=\"direct-link\" href=\"#a-tool-to-motivate-yourselves\">#</a></h2>\n<p>You might not admit this but working on customer projects sucks sometime. The reasons can be the technologies are too old or you are not interested in the technologies used in the project, worked too long on the project and want to find something new.</p>\n<p>Start a side project is a good way to motivate yourselves. Getting some new friends in the field, getting some new stars, learn some new good ways doing things will be a big motivation and can save your career. You might also discover some new ways to do things better and can contribute back to the projects you are working. By contribute more, your influences in the project will be raised and that's a way to leverage your career into the next level.</p>\n<h2 id=\"connect-with-more-people-on-the-same-field\">Connect With More People On The Same Field <a class=\"direct-link\" href=\"#connect-with-more-people-on-the-same-field\">#</a></h2>\n<p>Working on a same team, same company too long? Meet old friends every day? Some time you feel just f**king old and hence starting a new field, on new platform and making friend with someone out side the company will be a salvation for you. You might hear something new from your new friends about the way they work, about the new technologies they use and that would be awesome.</p>\n<h2 id=\"how-to-get-there%3F\">How To Get There? <a class=\"direct-link\" href=\"#how-to-get-there%3F\">#</a></h2>\n<ol>\n<li>Start with something you love: if not you will give up very shortly.</li>\n<li>Do it yourselves and alone: it's hard to find a co-founder and hard to keep up the relationship for more than 6 months for a side-opensource project. Better start with yourselves first.</li>\n<li>Be persistence: good things need time to build, try to be persistence with what you build and commit to build it until you complete it.</li>\n<li>Stars is a tool to motivate yourself: it's not something you will impress your employer.</li>\n<li>Well document: update README, topic, project descriptions,... accordingly. Without a good README, no ones care your project.</li>\n<li>A live demo is everything: people is lazy, they love seeing something works.</li>\n<li>Share it and ask for feedback from your friends or from other popular channels like Facebook, Reddit,...</li>\n<li>Build projects around your lib/framework</li>\n</ol>\n<h2 id=\"dangerous-paths-to-avoid\">Dangerous Paths To Avoid <a class=\"direct-link\" href=\"#dangerous-paths-to-avoid\">#</a></h2>\n<ol>\n<li>Stars is actually not the goal: Learning and having fun is.</li>\n<li>Getting stars to impress employers: please no. They don't give a f**k about GitHub stars. Showing your projects to them might hurt you back.</li>\n<li>Afraid to share: nothing wrong to share your project with others. See &quot;<a href=\"http://www.paulgraham.com/early.html\">early work</a>&quot; from Paul Graham if you think your projects are lame.</li>\n<li>Some people advertise their project just to get more stars: please don't do it, advertise for feedback instead.</li>\n<li>Never ask for stars, ask for feedback instead.</li>\n</ol>\n",
      "date_published": "2021-01-15T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/useful-docker-commands/",
      "url": "https://thefortunedays.com/articles/useful-docker-commands/",
      "title": "Useful Docker Commands",
      "content_html": "<p>Just a collection of useful Docker commands</p>\n<p>List all Docker images</p>\n<pre><code>docker images\n</code></pre>\n<p>List all docker process</p>\n<pre><code>docker ps -a\n</code></pre>\n<p>Stop a Docker container by its name.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> stop <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> container <span class=\"token function\">ls</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span><span class=\"token variable\">)</span></span></code></pre>\n<p>Remove a Docker container by its name.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> container <span class=\"token function\">ls</span> -a <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span><span class=\"token variable\">)</span></span></code></pre>\n<p>Remove a Docker image by its name</p>\n<pre><code>docker rmi -f $(docker images | grep &quot;name&quot; | awk '{print $3}')\n</code></pre>\n<p>Load a Docker image from a file</p>\n<pre><code>docker load &lt; image.gz\n</code></pre>\n",
      "date_published": "2021-01-06T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/how-we-work-together/",
      "url": "https://thefortunedays.com/articles/how-we-work-together/",
      "title": "How We Work Together",
      "content_html": "<p>We all want to be successful. And this article does nothing more than providing a guidance on how we should work together to bring success to every single member in our team.</p>\n<p>Our goal is to help everyone be more efficient at work. We want to help you focusing on the work that matter, achieving your goals and play together as good friends.</p>\n<p>The values in this document are fleshed out through a simple good vs. bad comparison.</p>\n<h2 id=\"default-to-action\">Default To Action <a class=\"direct-link\" href=\"#default-to-action\">#</a></h2>\n<p>What this means: Be proactive to take action on tasks and team problems. Take action as soon as possible, don't wait until a perfect moment to do something as most decisions are changeable. It's better to deliver something real today over something maybe better later.</p>\n<h3 id=\"tips-on-how-to-apply-this-value%3A\">Tips on how to apply this value: <a class=\"direct-link\" href=\"#tips-on-how-to-apply-this-value%3A\">#</a></h3>\n<p>“When I see a problem, I take action.” vs. “When I see a problem, I ignore it because it's someone else's job.”</p>\n<p>&quot;If I'm unsure about something, I seek out help from my manager or a teammate.&quot; vs. &quot;I don't like to ask questions or raise issues because I'm afraid I'll look bad.&quot;</p>\n<p>&quot;I prefer to make a quick, decent decision instead of pursuing perfection.&quot; vs. &quot;I hold myself to making perfect or near-perfect decisions no matter the cost.&quot;</p>\n<p>&quot;When prioritizing my day, I focus on tasks that align with my team's goals.&quot; vs. &quot;I spin up new projects frequently and get frustrated when no one dedicates time to helping me.&quot;</p>\n<p>&quot;We tackle big hairy problems and take big bets diligently as a team.&quot; vs. &quot;I make big, tough to reverse decisions on my own.&quot;</p>\n<p>&quot;I actively get new tasks in the queue or actively asking for new tasks from manager.&quot; vs &quot;I wait for my manager to assign task.&quot;</p>\n<h2 id=\"default-to-transparency\">Default To Transparency <a class=\"direct-link\" href=\"#default-to-transparency\">#</a></h2>\n<p>What this means: When working in a distributed team, staying on the same page is tough. Sharing context, goals, objectives, and in-progress work in public helps us all achieve a common goal.</p>\n<h3 id=\"tips-on-how-to-apply-this-value%3A-2\">Tips on how to apply this value: <a class=\"direct-link\" href=\"#tips-on-how-to-apply-this-value%3A-2\">#</a></h3>\n<p>&quot;I keep my team members in tune with relevant information as it can be appropriately shared with context so there's rarely surprises.&quot; vs. &quot;I hold back information until the very point it needs to be shared, even if it is a surprise to my teammates, that's OK.&quot;</p>\n<p>&quot;I share my work with my peers early and often so we can course correct quickly.&quot; vs. &quot;I share my masterpiece at the end in a big grand reveal.&quot;</p>\n<p>&quot;I make it easy for others to follow my work by summarizing tasks accomplished and decisions made, and providing links to source material for deeper context.&quot; vs. &quot;I share raw notes and all details of my work and decisions, and expect others have the time to consume it all.&quot;</p>\n<p>&quot;I distill reporting to what's relevant to my audience, linking out to details that are already understood.&quot; vs. &quot;I share everything out of concern my audience might question my decision-making or productivity.&quot;</p>\n<p>&quot;When sensitive details come my way, I think twice and consult a manager before sharing publicly.&quot; vs. &quot;I share far and wide just for transparency's sake.&quot;</p>\n<h2 id=\"grow-through-feedback\">Grow Through Feedback <a class=\"direct-link\" href=\"#grow-through-feedback\">#</a></h2>\n<p>What this means: We all have personal goals and ambitions. Let's work together to help us all achieve our goals.</p>\n<h3 id=\"tips-on-how-to-apply-this-value%3A-3\">Tips on how to apply this value: <a class=\"direct-link\" href=\"#tips-on-how-to-apply-this-value%3A-3\">#</a></h3>\n<p>“When I hear feedback, I improve with it.” vs. “When I hear feedback, I disengage.”</p>\n<p>&quot;I assume positive intent when receiving feedback.&quot; vs. &quot;I feel attacked when receiving feedback.&quot;</p>\n<p>“When a teammate's work helps me, I say thanks by sharing how.” vs. “I keep feedback to myself.”</p>\n<p>&quot;I reflect on and engage with learning opportunities.&quot; vs. &quot;I prefer to gloss over missteps or mistakes because it is more comfortable than addressing them head on.&quot;</p>\n<p>“I participate in other people’s development.” vs. “I stay silent to avoid hurting feelings or feeling uncomfortable.”</p>\n<p>&quot;I provide feedback directly and compassionately.&quot; vs. &quot;I provide feedback without the ultimate goal of helping the other person.&quot;</p>\n<p>“When change happens, I embrace new opportunities.” vs. “When change happens, I fear for the worst.&quot;</p>\n<h2 id=\"empathy%2C-no-ego\">Empathy, No Ego <a class=\"direct-link\" href=\"#empathy%2C-no-ego\">#</a></h2>\n<p>What this means: All of our teammates are smart and talented. When we work together we will be successful.</p>\n<h3 id=\"tips-on-how-to-apply-this-value%3A-4\">Tips on how to apply this value: <a class=\"direct-link\" href=\"#tips-on-how-to-apply-this-value%3A-4\">#</a></h3>\n<p>“I work with others to build on great ideas.&quot; vs. “I work alone because my ideas are the best.”</p>\n<p>&quot;I take interest in my teammates' and users' well being. I know with strong bonds we can go through any tough time together.&quot; vs. &quot;I treat my team as resources to help me achieve tasks that advance my interests.&quot;</p>\n<p>&quot;If the floor is dirty, I sweep the floor.&quot; vs. &quot;I wait for the janitor to sweep the floor because some jobs are below me.&quot;</p>\n<p>Sometimes it's not about a big ego. Sometimes we need guidance on how to handle a bruised ego and learn to be forgiving of ourselves to take the next steps. These rules help give guidance for this set of situations:</p>\n<p>&quot;When I fail, I learn.&quot; vs. &quot;When I fail, I'm no good.&quot;</p>\n<p>&quot;I can learn anything I want to.&quot; vs. &quot;I'm either good at it or I'm not.&quot;</p>\n<p>&quot;When I'm frustrated I persevere.&quot; vs. &quot;When I'm frustrated I give up.&quot;</p>\n<p>&quot;If you succeed, I feel inspired.&quot; vs. &quot;If you succeed, I feel threatened.&quot;</p>\n",
      "date_published": "2020-12-25T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-reading-list/",
      "url": "https://thefortunedays.com/articles/go-reading-list/",
      "title": "Go Reading List",
      "content_html": "<p>Don't know what resources to read and how to get started might lead to long and challenged journey on learning a new programming language. This article show you a list of articles you should read when learning Go from basic to advanced.</p>\n<p>The best way to start is reading the top 4 resources of the Beginner section, do some basic exercises and then continue to read the Intermediate and Advanced sections while working on an intermediate project.</p>\n<h2 id=\"beginner\">Beginner <a class=\"direct-link\" href=\"#beginner\">#</a></h2>\n<ul>\n<li><a href=\"https://tour.golang.org/welcome/1\">The Tour of Go</a></li>\n<li><a href=\"https://gobyexample.com/\">Go by example</a></li>\n<li><a href=\"https://golang.org/doc/install\">Install Go</a></li>\n<li><a href=\"https://golang.org/doc/code.html\">How to write Go code</a></li>\n<li><a href=\"https://github.com/golovers/effective-go\">Effective Go and Go idiomatic</a></li>\n<li><a href=\"https://golang.org/doc/faq\">Go FAQ</a></li>\n<li><a href=\"https://talks.golang.org/\">Go Talks</a></li>\n<li><a href=\"https://github.com/avelino/awesome-go\">Go Awesome</a></li>\n</ul>\n<h2 id=\"intermediate\">Intermediate <a class=\"direct-link\" href=\"#intermediate\">#</a></h2>\n<h3 id=\"array%2C-slice\">Array, Slice <a class=\"direct-link\" href=\"#array%2C-slice\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/go-slices-usage-and-internals\">Go slices usage and internals</a></li>\n<li><a href=\"https://blog.golang.org/slices\">Slices</a></li>\n</ul>\n<h3 id=\"strings\">Strings <a class=\"direct-link\" href=\"#strings\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/strings\">Strings</a></li>\n</ul>\n<h3 id=\"functions\">Functions <a class=\"direct-link\" href=\"#functions\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/defer-panic-and-recover\">Defer, Panic, and Recover</a></li>\n<li><a href=\"https://blog.golang.org/functions-codewalk\">First Class Functions in Go</a></li>\n</ul>\n<h3 id=\"errors\">Errors <a class=\"direct-link\" href=\"#errors\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/errors-are-values\">Errors are values</a></li>\n<li><a href=\"https://blog.golang.org/error-handling-and-go\">Error handling in Go</a></li>\n<li><a href=\"https://blog.golang.org/go1.13-errors\">Error handling in Go 1.13</a></li>\n</ul>\n<h3 id=\"interface\">Interface <a class=\"direct-link\" href=\"#interface\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/gif-decoder-exercise-in-go-interfaces\">Gift decoder exercise in Go interface</a></li>\n<li><a href=\"https://blog.golang.org/laws-of-reflection/\">Law of Reflection</a></li>\n</ul>\n<h3 id=\"http\">HTTP <a class=\"direct-link\" href=\"#http\">#</a></h3>\n<ul>\n<li><a href=\"https://godoc.org/net/http\">HTTP package in Go doc</a></li>\n<li><a href=\"https://blog.golang.org/http-tracing\">HTTP Tracing</a></li>\n</ul>\n<h3 id=\"context\">Context <a class=\"direct-link\" href=\"#context\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/context\">Context</a></li>\n<li><a href=\"https://blog.golang.org/context-and-structs\">Contexts and structs</a></li>\n</ul>\n<h3 id=\"testing\">Testing <a class=\"direct-link\" href=\"#testing\">#</a></h3>\n<ul>\n<li><a href=\"https://godoc.org/testing\">Testing package</a></li>\n<li><a href=\"https://godoc.org/net/http/httptest\">HTTP Testing</a></li>\n<li><a href=\"https://godoc.org/testing\">Table driven testing</a></li>\n<li><a href=\"https://blog.golang.org/subtests\">Using Subtests and Sub - benchmarks</a></li>\n</ul>\n<h3 id=\"database\">Database <a class=\"direct-link\" href=\"#database\">#</a></h3>\n<ul>\n<li><a href=\"http://go-database-sql.org/\">Go database tutorial</a></li>\n<li><a href=\"http://jmoiron.github.io/sqlx/\">SQLX</a></li>\n</ul>\n<h3 id=\"goroutines\">Goroutines <a class=\"direct-link\" href=\"#goroutines\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/share-memory-by-communicating\">Sharing by communicating</a></li>\n<li><a href=\"https://blog.golang.org/concurrency-is-not-parallelism\">Concurrency is not parallelism</a></li>\n<li><a href=\"https://blog.golang.org/context\">Go Concurrency Patterns: Context</a></li>\n<li><a href=\"https://blog.golang.org/go-concurrency-patterns-timing-out-and\">Go concurrency patterns timing out, moving on</a></li>\n<li><a href=\"https://blog.golang.org/pipelines\">Go Concurrency Patterns: Pipelines and cancellation</a></li>\n<li><a href=\"https://blog.golang.org/race-detector\">Introducing the Go Race Detector</a></li>\n<li><a href=\"https://blog.golang.org/io2013-talk-concurrency\">Advanced Go Concurrency Patterns</a></li>\n</ul>\n<h3 id=\"generics\">Generics <a class=\"direct-link\" href=\"#generics\">#</a></h3>\n<ul>\n<li><a href=\"https://go.dev/doc/tutorial/generics\">Generics Tutorial</a></li>\n<li><a href=\"https://go.dev/blog/intro-generics\">Introduction To Generics</a></li>\n<li><a href=\"https://go.googlesource.com/proposal/+/HEAD/design/43651-type-parameters.md\">Generics Proposal</a></li>\n<li><a href=\"https://go.dev/blog/when-generics\">When To Use Generics</a></li>\n</ul>\n<h3 id=\"go-modules\">Go Modules <a class=\"direct-link\" href=\"#go-modules\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.golang.org/using-go-modules\">Using Go Modules Series</a></li>\n</ul>\n<h3 id=\"advanced\">Advanced <a class=\"direct-link\" href=\"#advanced\">#</a></h3>\n<ul>\n<li><a href=\"https://go.dev/ref/spec\">Go Spec</a></li>\n<li><a href=\"https://go-proverbs.github.io/\">Go Proverbs</a></li>\n<li><a href=\"https://blog.golang.org/laws-of-reflection\">Laws of reflection</a></li>\n<li><a href=\"https://research.swtch.com/interfaces\">Interface</a></li>\n<li><a href=\"https://blog.golang.org/profiling-go-programs\">Profiling Go programs</a></li>\n<li><a href=\"https://blog.golang.org/ismmkeynote\">Getting to Go: The Journey of Go's Garbage Collector</a></li>\n<li><a href=\"https://golang.org/doc/asm\">A Quick Guide to Go's Assembler</a></li>\n</ul>\n<h2 id=\"books\">Books <a class=\"direct-link\" href=\"#books\">#</a></h2>\n<p><em>Note: to be fair with the authors, please buy the books if you can.</em></p>\n<ul>\n<li><a href=\"https://drive.google.com/open?id=1-PNY3PXfwKnaOdFHeOx0JuC8NnCVQmgF\">The Go Programming Language - Donovan, Alan A. A</a></li>\n<li><a href=\"https://drive.google.com/open?id=1QhsqRZOsO9zd3aEiq_OE8nKDNEqxVV40\">Go in Practice</a></li>\n<li><a href=\"https://github.com/astaxie/build-web-application-with-golang\">Build web application with Go</a></li>\n<li><a href=\"https://drive.google.com/open?id=1lW8EniL8LkLtbCxRIvc_x3ELZCjPcYho\">Go Advanced Programming</a></li>\n<li><a href=\"https://checkmarx.gitbooks.io/go-scp/\">Go programming language secure coding practices guide (FREE)</a></li>\n</ul>\n",
      "date_published": "2020-12-25T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-interview-structure/",
      "url": "https://thefortunedays.com/articles/go-interview-structure/",
      "title": "Go Interview Structure",
      "content_html": "<p><strong>Summary</strong>: An interview guideline for practicing that increases your chance of passing a Go interview to 97.5% even you're a young non-native English speaker developer. Note that this structure is designed for my team where I know the interviewer quite well.</p>\n<p>Answer interview's questions in a structure fashion has never been easy even with experienced developers. This is even more challenged with non-native English speakers like Vietnamese young developers. Sometime candidates talk too much or too little, or even make bad impression to interviewers by saying things they shouldn't say,... Those little things often lead to a failed interview.</p>\n<p>For young and non-native English speaker developers in Vietnam, we need a simple structure so that they can learn and practice themselves. I created and applied successfully the interview structure below for more than 50 developers for Go developer position. Most of them are fresh graduate with less than 1 year of experience and the success rate of the interviews is more than 97.5%.</p>\n<p>If you're a young Vietnamese developer who are trying to pass a Go interview, this guideline is for you. The guideline is provided as a template with some very basic rules so that you can use it for practicing with your mentors and easier to make your own styles.</p>\n<h2 id=\"general-notices\">General Notices <a class=\"direct-link\" href=\"#general-notices\">#</a></h2>\n<p>Although the rules listed below are very basic, but a lot of people makes those mistakes. Hence make sure you are very clear the below rules before your interview:</p>\n<ul>\n<li>Be respectful to the interviewers.</li>\n<li>Listen to the questions carefully.</li>\n<li>Be clear about your role and what you did in the projects.</li>\n<li>Don't just say &quot;I know it&quot; and stop. Instead, talk about your real experiences with the technologies in your past projects in full context. And if possible, provide your analysis or comparison with similar technologies.</li>\n<li>Don't assume that interviewers know your projects or familiar with the domains/technologies in your projects. Instead, provide them a full context of what/when/why and how did you use it.</li>\n<li>Don't use &quot;we&quot;. Instead, use &quot;I&quot; when talking about your experiences.</li>\n<li>Don't argue with interviewers about why they use a specific technology instead of another one. Instead, ask them about the context that led to the decision of using it.</li>\n<li>If you don't know a specific technology, don't just say &quot;I don't know&quot;. Instead, admit that you have not had a chance to work with it and talk about your experiences with similar technologies.</li>\n<li>Be honest, be nice and smile.</li>\n<li>Practice makes perfect.</li>\n</ul>\n<h3 id=\"introduce-yourself-and-projects-you've-worked\">Introduce Yourself And Projects You've Worked <a class=\"direct-link\" href=\"#introduce-yourself-and-projects-you've-worked\">#</a></h3>\n<p>There are a plenty of ways to introduce yourself and an overview on what you have worked on. Through my experiences as mentors for more than a hundred of developers, providing enough key information is very important in the introduction.</p>\n<p>I suggest to talk a very overview about your self and at most 2 or 3 relevant projects that you have worked on.</p>\n<ul>\n<li>Your Name, might be age?</li>\n<li>How many years in software development?</li>\n<li>Whether you are a back-end/front-end/full-stack or DevOps developer?</li>\n<li>What programming languages, technologies you are good at?</li>\n<li>Tell them at most 2 or 3 relevant projects you've worked on:- Type of project: web, desktop, mobile, API, microservice application?- An overview about the goal/purpose or main features of the project.- Technologies are used in the project.- Your role/what you did in the project.</li>\n</ul>\n<h3 id=\"describes-a-project-in-detail\">Describes A Project In Detail <a class=\"direct-link\" href=\"#describes-a-project-in-detail\">#</a></h3>\n<p>When talking about the detail of a project, the general guideline is to go from &quot;overview&quot; to &quot;detail&quot;. Talking about the overview first to make sure the interviewers know the big picture of the project, and talking about the detail to show them your deep knowledge of the project.</p>\n<ul>\n<li>Type: web, desktop, micro-service, API application, CLI,...</li>\n<li>Your role: fix bug/implement new features. What features did you worked on?</li>\n<li>Architect: describe in detail back-end/front-end/database technologies, deployment, how components communicates to each other. Technologies used in the project,...</li>\n<li>Structure: how did you structure the project? how many modules? How each module is structured?...</li>\n<li>Library: names of some big libraries, why did you choose that libraries instead of others.</li>\n<li>Deployment: Docker/Docker Compose, Kubernetes? How did u write Docker file, Docker compose file, Kubernetes?..</li>\n</ul>\n<h3 id=\"talk-about-the-exam\">Talk About The Exam <a class=\"direct-link\" href=\"#talk-about-the-exam\">#</a></h3>\n<p>Some customers request candidate to take a coding exam before the interview, hence you must be clear on what you've done.</p>\n<ul>\n<li>Summary the exercises requirements and your solution.</li>\n<li>Calculate the big O notation for the exercises.</li>\n</ul>\n<h3 id=\"other-technologies\">Other Technologies <a class=\"direct-link\" href=\"#other-technologies\">#</a></h3>\n<p>Some interviewers might interested in relevant technologies and the list of the technologies can be varied depend on project's requirements.</p>\n<p>The ground rules for answer these questions is that you must know how you used those technologies in detail. If you don't know, just admit that you don't know. If you know some similar technologies, talk about them to the interviewers so that he/she can understand that you can learn it quickly.</p>\n<p>Some interviewers also interested some fundamental information like:</p>\n<ol>\n<li>What version of the technology you are using?</li>\n<li>What did you use the technologies for? And why?</li>\n<li>Why don't you use technology X instead of technology Y.</li>\n<li>What library did you use in your project? Why did you choose it instead of another?</li>\n</ol>\n<p>In most of the interviews for Go position that I'm the mentor, they often ask for below technologies:</p>\n<ul>\n<li>Docker</li>\n<li>Kafka</li>\n<li>Elastic search</li>\n<li>Logging</li>\n<li>MongoDB</li>\n</ul>\n<h3 id=\"questions-about-go\">Questions About Go <a class=\"direct-link\" href=\"#questions-about-go\">#</a></h3>\n<p>Although there are many questions an interview can ask a candidate about Go, I found more than 95% interviewers ask below questions when it comes to Go specific questions.</p>\n<ul>\n<li>Compare Go vs Java, C, Python, C++, JavaScript?</li>\n<li>What are the differences between array and slice?</li>\n<li>What are the differences between Goroutine and Thread?</li>\n<li>How did you structure your code in Go?</li>\n<li>What framework/library did you use in your project?</li>\n<li>How did you measure performance of your application?</li>\n</ul>\n<h3 id=\"reverse-interview\">Reverse Interview <a class=\"direct-link\" href=\"#reverse-interview\">#</a></h3>\n<ul>\n<li>What do you want to ask the interviewer?</li>\n</ul>\n<h3 id=\"final-notes\">Final Notes <a class=\"direct-link\" href=\"#final-notes\">#</a></h3>\n<ul>\n<li>Don't stop until they say so. Don't just say yes and no, talk more about your experiences in detail so that the interviewer understand you and your work.</li>\n</ul>\n<h3 id=\"what-next%3F\">What next? <a class=\"direct-link\" href=\"#what-next%3F\">#</a></h3>\n<p>If you want to read more about common interview process, I recommend you to take a look at this page: <a href=\"https://techinterviewhandbook.org/introduction\">https://techinterviewhandbook.org</a></p>\n",
      "date_published": "2020-12-25T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/go-interview-questions/",
      "url": "https://thefortunedays.com/articles/go-interview-questions/",
      "title": "Go Interview Questions",
      "content_html": "<p>Learning without testing your knowledge can lead to wrong perception about your expertise level. This article provides you a list of questions for you to evaluate yourself easier.</p>\n<h2 id=\"go-questions\">Go Questions <a class=\"direct-link\" href=\"#go-questions\">#</a></h2>\n<h3 id=\"1.-basic\">1. Basic <a class=\"direct-link\" href=\"#1.-basic\">#</a></h3>\n<ul>\n<li>What is Go?</li>\n<li>Why should you learn Go?</li>\n<li>What is Go suitable for?</li>\n<li>What are the advantages and disadvantages of Go?</li>\n<li>How Go is different from the programming languages that you have used? (Java, C/C++, Python, Rust, NodeJS, JavaScript)</li>\n</ul>\n<h3 id=\"2.-array-and-slice\">2. Array and Slice <a class=\"direct-link\" href=\"#2.-array-and-slice\">#</a></h3>\n<ul>\n<li>What are the differences between array and slice?</li>\n<li>What are the differences between slice and link list?</li>\n<li>How re- slicing process of a slice happen under the hood?</li>\n<li>Can you modify array length? Can you append new item into an array?</li>\n<li>Explain how different between array/slice in Go and array in C/Java?</li>\n</ul>\n<h3 id=\"3.-string\">3. String <a class=\"direct-link\" href=\"#3.-string\">#</a></h3>\n<ul>\n<li>How is string in Go constructed? And what is the different between string in Go with other programming languages?</li>\n<li>What is string literal? How is it done in Go?</li>\n<li>Explain how you can write multi-line strings in GO?</li>\n</ul>\n<h3 id=\"4.-goroutine\">4. Goroutine <a class=\"direct-link\" href=\"#4.-goroutine\">#</a></h3>\n<ul>\n<li>What are the difference between goroutine and OS thread?</li>\n<li>Explain what is go routine in GO? How you can stop go routine?</li>\n<li>What is a worker pool? And how to do that in Go?</li>\n<li>How to stop a worker pool?</li>\n<li>What is fan-in, fan-out?</li>\n<li>What is sync.WaitGroup used for?</li>\n<li>What are the differences between sync.Mutex and semaphore?</li>\n<li>What are the differences between concurrency and parallelism?</li>\n<li>What are the differences between sharing by communicate vs communicate by sharing?</li>\n<li>What is channel? How does it work? What is it used for?</li>\n<li>What is context? What is it used for?</li>\n<li>Have you used goroutine in your application? Describe it.</li>\n<li>Why goroutine is better than thread?</li>\n<li>What is goroutine leak in Go? How to prevent it?</li>\n</ul>\n<h3 id=\"5.-interface\">5. Interface <a class=\"direct-link\" href=\"#5.-interface\">#</a></h3>\n<ul>\n<li>Explain Interface in Go</li>\n<li>How interface in Go different from interface in other languages?</li>\n<li>When should you use interface?</li>\n<li>How did you use interface in your previous project?</li>\n</ul>\n<h3 id=\"6.-other-general-questions%3A\">6. Other General Questions: <a class=\"direct-link\" href=\"#6.-other-general-questions%3A\">#</a></h3>\n<ul>\n<li>Does Go pass by value or pass by references? What are the differences?</li>\n<li>What is Go run time?</li>\n<li>How does garbage collector work in Go?</li>\n<li>What is inside the interface{}?</li>\n<li>How to handle gracefully shutdown in Go?</li>\n<li>Why would you prefer to use an empty struct{} ? Provide some examples of the good use of the empty struct{} .</li>\n<li>How do you compare two structs? What about two interfaces? Provide examples.</li>\n<li>How do you implement stack and queue in Go? Provide an example.</li>\n<li>What is type assertion and how is it done in Go?</li>\n<li>How type conversion is done in Go?</li>\n<li>What is the difference, if any, in the following two slice declarations, and which one is more preferable? var a []int and a := []int{}</li>\n</ul>\n<h2 id=\"real-experiences-questions\">Real Experiences Questions <a class=\"direct-link\" href=\"#real-experiences-questions\">#</a></h2>\n<h3 id=\"1.-general%3A\">1. General: <a class=\"direct-link\" href=\"#1.-general%3A\">#</a></h3>\n<ul>\n<li>How did you structure your last project in Go? What are the advantages and disadvantages of it?</li>\n</ul>\n<h3 id=\"2.-config\">2. Config <a class=\"direct-link\" href=\"#2.-config\">#</a></h3>\n<ul>\n<li>How did you manage configurations of your services in Go?</li>\n<li>What kind of libraries did you use for configuration management in Go? Compare them.</li>\n<li>How did you manage configurations of your services in Docker, OpenShift, Kubenetes environment?</li>\n</ul>\n<h3 id=\"3.-http\">3. HTTP <a class=\"direct-link\" href=\"#3.-http\">#</a></h3>\n<ul>\n<li>Have you ever used any framework for working with HTTP in Go? Compare it with native HTTP library provided by Go.</li>\n<li>What is middleware? Have you ever written one?</li>\n</ul>\n<h3 id=\"4.-logging\">4. Logging <a class=\"direct-link\" href=\"#4.-logging\">#</a></h3>\n<ul>\n<li>Explain how did you implement logging component in your last application with Go?</li>\n<li>Did you use any libraries for logging in Go? Explain how did you use it and compare with native logging library.</li>\n<li>How did you organize logging in containerize environment like Docker, Kubernetes, OpenShift where you have a lot of instances running at the same time?</li>\n</ul>\n<h3 id=\"5.-deployment%3A\">5. Deployment: <a class=\"direct-link\" href=\"#5.-deployment%3A\">#</a></h3>\n<ul>\n<li>How did you deploy your application?</li>\n<li>Have you ever used Docker or any containerize technology for deployment? Describes it.</li>\n<li>Have you ever written Docker file? Describes it?</li>\n</ul>\n<h3 id=\"6.-database%3A\">6. Database: <a class=\"direct-link\" href=\"#6.-database%3A\">#</a></h3>\n<ul>\n<li>Have you ever used MongoDB? Explain in detail what did you use it for?</li>\n<li>Explain what are the differences between NoSQL and SQL? When should you use NoSQL and when not to?</li>\n<li>What library did you use to interact with MongoDB in Go? Compare it with other libraries.</li>\n<li>How big your data is?</li>\n<li>How did you scale your MongoDB for performance?</li>\n</ul>\n<h3 id=\"7.-search-engine%3A\">7. Search Engine: <a class=\"direct-link\" href=\"#7.-search-engine%3A\">#</a></h3>\n<ul>\n<li>What did you use Elasticsearch for?</li>\n<li>When should you use Elasticsearch and when should you use MongoDB?</li>\n<li>What library did you use to interact with Elasticsearch in Go?</li>\n<li>How did you handle a lot of indexing in high performance application?</li>\n<li>Do you know bulk processor? Did you use it? How does it work?</li>\n</ul>\n<h3 id=\"8.-message-queue%3A\">8. Message queue: <a class=\"direct-link\" href=\"#8.-message-queue%3A\">#</a></h3>\n<ul>\n<li>Have you ever used any message queue technology? Describe how did you use it.</li>\n<li>Have you ever used Kafka? How is it used in your application? And why did you choose it?</li>\n<li>When should you use message queue? Give some example.</li>\n</ul>\n<h3 id=\"9.-performance\">9. Performance <a class=\"direct-link\" href=\"#9.-performance\">#</a></h3>\n<ul>\n<li>How many query/second of your application?</li>\n<li>How can you measure performance of your application?</li>\n<li>How did you scale up your application?</li>\n</ul>\n",
      "date_published": "2020-12-25T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/working-with-constant-in-go/",
      "url": "https://thefortunedays.com/articles/working-with-constant-in-go/",
      "title": "Working with constant in Go",
      "content_html": "<p>In Go, only Number, String, Boolean can be constant. <code>const </code>keyword is used to define constant:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tDefaultKey <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><br><br>\tCountryCodeVN <span class=\"token operator\">=</span> <span class=\"token string\">\"vn\"</span><br>\tCountryCodeUS <span class=\"token operator\">=</span> <span class=\"token string\">\"us\"</span><br><br>\tDefaultMultiplyFactor <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><br><br>\tEnable  <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br>\tDisable <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br><span class=\"token punctuation\">)</span></code></pre>\n<p>constants are final. Once initialized, their values cannot be changed:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> defaultKey <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><br>defaultKey <span class=\"token operator\">=</span> <span class=\"token string\">\"my key\"</span> <span class=\"token comment\">// panic</span></code></pre>\n<p>Constant can be <code>untyped</code>. When a constant is <code>untyped</code>, its precision is higher than the normal number type.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tbigNum <span class=\"token operator\">=</span> <span class=\"token number\">9999999999999999999.0</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tv <span class=\"token operator\">:=</span> <span class=\"token number\">9999999999999999999.0</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T, %T\\n\"</span><span class=\"token punctuation\">,</span> bigNum<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%t, %t\"</span><span class=\"token punctuation\">,</span> bigNum <span class=\"token operator\">==</span> bigNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">==</span> v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false, true</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/ccwcVjdwJmu\">Playground</a></p>\n<p>untyped constant can be cast to any other similar types. But its precision will be reduced:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tnum    <span class=\"token operator\">=</span> <span class=\"token number\">200</span><br>\tbigNum <span class=\"token operator\">=</span> <span class=\"token number\">9999999999999999999.0</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> number <span class=\"token builtin\">int</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// can be cast to any similar types</span><br>\t<span class=\"token keyword\">var</span> i <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> num<br>\t<span class=\"token keyword\">var</span> j <span class=\"token builtin\">int64</span> <span class=\"token operator\">=</span> num<br>\t<span class=\"token keyword\">var</span> k <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> num<br>\t<span class=\"token keyword\">var</span> n number <span class=\"token operator\">=</span> num<br><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// but its precision will be reduced when assign to a specific type</span><br>\t<span class=\"token keyword\">var</span> bigFloat <span class=\"token builtin\">float64</span> <span class=\"token operator\">=</span> bigNum<br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%t, %t\"</span><span class=\"token punctuation\">,</span> bigNum <span class=\"token operator\">==</span> bigNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bigFloat <span class=\"token operator\">==</span> bigFloat<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false, true</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/kzhDHGRqXOY\">Playground</a></p>\n<p><code>iota </code>identifier can be used in constant declarations to simplify definitions of incrementing numbers:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ByteSize <span class=\"token builtin\">float64</span><br><br><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\t<span class=\"token boolean\">_</span>           <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// ignore first value by assigning to blank identifier</span><br>\tKB ByteSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">iota</span><span class=\"token punctuation\">)</span><br>\tMB<br>\tGB<br>\tTB<br>\tPB<br>\tEB<br>\tZB<br>\tYB<br><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/0jFA5KLOhl4\">Playground</a></p>\n<p>Weekday using iota:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> WeekDay <span class=\"token builtin\">int8</span><br><br><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tSunday WeekDay <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>\tMonday<br>\tTuesday<br>\tWednesday<br>\tThursday<br>\tFriday<br>\tStaturday<br><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/JCDZ4sb6-1A\">Playground</a></p>\n<p>Value of <code>iota </code>is its position in the <code>const </code>block:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tUS <span class=\"token operator\">=</span> <span class=\"token string\">\"United State\"</span><br>\tVN <span class=\"token operator\">=</span> <span class=\"token string\">\"Vietnam\"</span><br>\tOther<br><br>\tTuesday <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tuesday:\"</span><span class=\"token punctuation\">,</span> Tuesday<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Tuesday: 3</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/kZADXgnL7Q4\">Playground</a></p>\n<p>If constant is defined without value, its value is same with the nearest one:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span><br>\tUS <span class=\"token operator\">=</span> <span class=\"token string\">\"United State\"</span><br>\tVN <span class=\"token operator\">=</span> <span class=\"token string\">\"Vietnam\"</span><br>\tOther<br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VN:\"</span><span class=\"token punctuation\">,</span> VN<span class=\"token punctuation\">)</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other:\"</span><span class=\"token punctuation\">,</span> Other<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Other: Vietnam</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/IwyASPF6abF\">Playground</a></p>\n",
      "date_published": "2019-09-26T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/working-with-string-in-go/",
      "url": "https://thefortunedays.com/articles/working-with-string-in-go/",
      "title": "Working with string in Go.",
      "content_html": "<p>String in Go is just an arbitrary slice of bytes. It can be created using string literals, or from a slice of bytes:</p>\n<pre class=\"language-go\"><code class=\"language-go\">str1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"This string is in 1 line.\"</span><br>str2 <span class=\"token operator\">:=</span> <span class=\"token string\">`This string is in multiple lines.<br>This is the second line.`</span><br>str3 <span class=\"token operator\">:=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>String in Go is immutable, cannot be nil, once created its content cannot be changed:</p>\n<pre class=\"language-go\"><code class=\"language-go\">str <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello, Go!\"</span><br>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span> <span class=\"token comment\">// panic</span></code></pre>\n<p>String supports UTF-8 by default. This means you can use any languages without a need of any external dependencies about UTF-8 processing.</p>\n<pre class=\"language-go\"><code class=\"language-go\">str <span class=\"token operator\">:=</span> <span class=\"token string\">\"Xin Chào Việt Nam\"</span><br>str1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"สวัสดีประเทศไทย\"</span></code></pre>\n<p>String uses rune (alias of <code>int32</code>) to represent Unicode point. Length of each characters can be varied from 1-4 bytes. Hence byte <code>i-th</code> is not necessary character <code>i-th</code>.</p>\n<pre class=\"language-go\"><code class=\"language-go\">msg <span class=\"token operator\">:=</span> <span class=\"token string\">\"你好\"</span><br><br><span class=\"token comment\">// byte i-th is not necessary character i-th.</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of byte 0-th: %c\\n\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"ä\"</span><br><br><span class=\"token comment\">// i is the byte position of the character in the slice of bytes</span><br><span class=\"token comment\">// c is the value of the character</span><br><span class=\"token comment\">// below block of code will print</span><br><span class=\"token comment\">// \tbyte 0th, value: 你</span><br><span class=\"token comment\">//\tbyte 3th, value: 好</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> msg <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"byte %d-th, value: %10c\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// another correct way to access the message as each character is convert it into rune</span><br><span class=\"token comment\">// below block of code will print</span><br><span class=\"token comment\">// \tcharacter 0th, value: 你</span><br><span class=\"token comment\">// \tcharacter 1th, value: 好 好</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"character %d-th, value: %c\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/gkAPhuftPFH\">Playground</a></p>\n<p><code>len </code>return number of bytes in the string, not number of characters. Convert to slice of rune for calculating number of characters.</p>\n<pre class=\"language-go\"><code class=\"language-go\">str <span class=\"token operator\">:=</span> <span class=\"token string\">\"Xin Chào Việt Nam\"</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number of bytes: %7d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number of characters: %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 17</span></code></pre>\n<p><a href=\"https://play.golang.org/p/yulwR4-a_Ct\">Playground</a></p>\n<p>String is comparable:</p>\n<pre class=\"language-go\"><code class=\"language-go\">str1 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Xin Chào Việt Nam\"</span><br>str2 <span class=\"token operator\">:=</span> <span class=\"token string\">\"Xin Chào Việt Nam\"</span><br>\t<br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<p>Package <a href=\"https://golang.org/pkg/strings/\">strings</a>, <a href=\"https://golang.org/pkg/unicode/utf8/\">utf-8</a>, <a href=\"https://golang.org/pkg/strconv/\">strconv </a>provides a lot of useful functionality about string:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> b strings<span class=\"token punctuation\">.</span>Builder<br><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d...\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br>b<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ignition\"</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3...2...1...ignition</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seafood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre>\n<h3 id=\"advanced\">Advanced <a class=\"direct-link\" href=\"#advanced\">#</a></h3>\n<p>String is actually a composite type named <code>StringHeader</code>, which is composed of 2 words: <code>Data </code>is a pointer that point to an underlying array and <code>Len </code>is the number of bytes the string has.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> StringHeader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Data <span class=\"token builtin\">uintptr</span><br>    Len  <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>We can get the <code>StringHeader </code> from a string by using <code>reflect </code>and <code>unsafe </code>package:</p>\n<pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello, string!\"</span><br><br>sh <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>StringHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data: %d, Len: %d\\n\"</span><span class=\"token punctuation\">,</span> sh<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">,</span> sh<span class=\"token punctuation\">.</span>Len<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Data: 4812010, Len: 14; Hello, string!</span></code></pre>\n<p><a href=\"https://play.golang.org/p/8C8iphVJdar\">Playground</a></p>\n",
      "date_published": "2019-09-24T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/working-with-slice-in-go/",
      "url": "https://thefortunedays.com/articles/working-with-slice-in-go/",
      "title": "Working with slice in Go.",
      "content_html": "<p>Slice in Go can be considered as dynamic version of array.</p>\n<p><code>[]T</code> is a slice of type <code>T</code>. Length and capacity of slice can be extended at run-time. This makes slice very flexible and widely used compare to array.</p>\n<p>A new slice can be created by using <code>make([]T, length, capacity),</code> slice literals or slicing from an existing array/slice:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// using make</span><br>s0 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>s1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>s2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// slice literals</span><br>s3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>s4 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// slicing from existing array</span><br>arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>s5 <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><br>s6 <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><br>s7 <span class=\"token operator\">:=</span> s6<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre>\n<p><a href=\"https://play.golang.org/p/qD9cs14OThh\">Playground</a></p>\n<p>Length is number of elements of the slice and capacity is number elements the underlying array can hold (<em>see explain about underlying array in advanced section</em>). And they can be calculated by using 2 built-in functions <code>len</code> and <code>cap</code></p>\n<pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len: %d, cap: %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 0, cap: 5</span></code></pre>\n<p>A new element can be added into a slice using <code>append</code> function:</p>\n<pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>s <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len: %d, cap: %d, values: %v\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 5, cap: 5, values: [1 2 3 4 5]</span></code></pre>\n<p>Slice element can be accessed via index and range statement can be used to range over the slice:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// get value by index</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[1]:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// modify value by index</span><br>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a:\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// range over the slice</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> a <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index: %d, value: %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/13CRguzzZM8\">Playground</a></p>\n<p>A slice can be copied to another one by using <code>copy</code> or <code>append</code>:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// using copy</span><br>b <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// using append</span><br>c <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// or another way with append</span><br>d <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/7Dzo-8WTs7E\">Playground</a></p>\n<p><code>append</code> can be used to cut/delete 1 or more elements in the middle of a slice:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cut the 2rd element</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cut the 2rd &amp; 3rd element</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://play.golang.org/p/Nw8S7Nbo0yq\">Playground</a></p>\n<p>For more tricks of using slice, see: <a href=\"https://github.com/golang/go/wiki/SliceTricks\">https://github.com/golang/go/wiki/SliceTricks</a></p>\n<p>Slice can be considered as reference type. This means modifying its value inside a function will change the values of the original slice:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">changeValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>\t<br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">changeValue</span><span class=\"token punctuation\">(</span>a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> v <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\ta<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/66rhhdWusLH\">Playground</a></p>\n<p>Capacity of slice will be double if its length reaches its current capacity: <em>(more complex strategy if length of slice is greater than 1024, see <a href=\"https://golang.org/src/runtime/slice.go\">slice.go</a>)</em></p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 2, cap: 2</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 3, cap: 4</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 5, cap: 8</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len: 6, cap: 8</span></code></pre>\n<p><a href=\"https://play.golang.org/p/qTI7dTg-kcN\">Playground</a></p>\n<h3 id=\"advanced\">Advanced <a class=\"direct-link\" href=\"#advanced\">#</a></h3>\n<p>A slice is actually a composite type named <code>SliceHeader</code> which is composed of 3 words: <code>Data</code>, <code>Len</code> and <code>Cap</code>. Data is a pointer that point to the first element of the underlying array that the slice can reach <em>(not necessary the first element of the array)</em>. Len is number elements of the slice and Cap is length of the underlying array:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> SliceHeader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>    Data <span class=\"token builtin\">uintptr</span><br>    Len  <span class=\"token builtin\">int</span><br>    Cap  <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>A slice can be reverse back to <code>SliceHeader</code> by using <code>reflect</code> and <code>unsafe</code> package:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br><br>h <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>SliceHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data: %d, Len: %d, Cap: %d\"</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Len<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Cap<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Data: 824634388208, Len: 2, Cap: 5</span></code></pre>\n<p><a href=\"https://play.golang.org/p/KHoXJWNFPLd\">Playground</a></p>\n<p>We can also reverse the pointer that point to the underlying array to an array using unsafe and type casting:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>a <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br><br>h <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>SliceHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%16s: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"slice\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2]</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%16s: %v\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"underlying array\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1 2 0 0 0]</span></code></pre>\n<p><a href=\"https://play.golang.org/p/YYAlb0604LF\">Playground</a></p>\n<p>When a slice is passed into a function, a copied version of the <code>SliceHeader</code> is created, but the data is still the same:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\ta <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>\ta <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br><br>\th <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>SliceHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// Address: 824633770032, Data: 824634212400, Len: 2, Cap: 5</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main - Address: %d, Data: %d, Len: %d, Cap: %d\\n\"</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Len<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Cap<span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">printSliceInfo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">printSliceInfo</span><span class=\"token punctuation\">(</span>a <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\th <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>SliceHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token comment\">// Address: 824633770056, Data: 824634212400, Len: 2, Cap: 5</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Func - Address: %d, Data: %d, Len: %d, Cap: %d\\n\"</span><span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Len<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">.</span>Cap<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/phC_BX65_15\">Playground</a></p>\n<p><code>append</code> statement always return a new slice header (as of Go 1.13):</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>a1 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Address: 824633770032, Data: 824634212400, Len: 2, Cap: 5</span><br>a2 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Address: 824634425392, Data: 824634441776, Len: 2, Cap: 5</span></code></pre>\n<p><a href=\"https://play.golang.org/p/X5I8U8uMhLO\">Playground</a></p>\n<p>One of the reason <code>make</code> always return a new <code>SliceHeader</code> is because the underlying array will be re-allocated to a completely new one if length of slice reach its capacity:</p>\n<pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// capacity = 5</span><br>a1 <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// exceed capacity, new underlying array will be allocated.</span></code></pre>\n<p><a href=\"https://play.golang.org/p/Npbs2-BoA6Y\">Playground</a></p>\n<h3 id=\"questions\">Questions <a class=\"direct-link\" href=\"#questions\">#</a></h3>\n<p>What the below program print and why?</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tarr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>\ts <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><br><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>What the below program print and why?</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tarr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>\ts <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br>\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><br><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>What the below program print and why?</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tarr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><br>\ts <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><br>\ts1 <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><br><br>\ts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><br><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2019-09-24T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/working-with-map-in-go/",
      "url": "https://thefortunedays.com/articles/working-with-map-in-go/",
      "title": "Working with map in Go.",
      "content_html": "<p>Map in Go is declared as <code>map[KeyType]ValueType</code>, where <code>KeyType </code>can be any type that is <a href=\"https://golang.org/ref/spec#Comparison_operators\">comparable</a>, and <code>ValueType </code>can be any type, including another map.</p>\n<p>Map is a reference type like pointers, slice hence it should be initialized by <code>make </code>before using. It can also be created and initialized by map literals:</p>\n<pre class=\"language-go\"><code class=\"language-go\">m1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// using make</span><br><br>m2 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// without values</span><br>m3 <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>     <span class=\"token comment\">// with values</span><br>\t<span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// print values</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m3<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/vSaAAIYu9mz\">Playground</a></p>\n<p>Map value can be set and retrieve by its key:</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// set values</span><br>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Rob Pike\"</span><br>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ken Thompson\"</span><br>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Robert Griesemer\"</span><br><br><span class=\"token comment\">// retrieve values</span><br>v <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span><br>v1 <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/9FZog_EL0UB\">Playground</a></p>\n<p><code>delete </code>can be used to delete a key from the map:</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><br><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// delete a non-exist key is OK.</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token comment\">// map[b:2]</span></code></pre>\n<p><a href=\"https://go.dev/play/p/VKseqzI4_Wu\">Playground</a></p>\n<p><code>len </code>can be used to calculate length of the map:</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// with values</span><br>\t<span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len=\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len= 2</span></code></pre>\n<p><a href=\"https://go.dev/play/p/1NjF7z8OzXU\">Playground</a></p>\n<p><code>for-range</code> can be used to range over the map. Note that the keys are not guarantee in the same order each time you range over the map.</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys are not guarantee in the same order each time...\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> m <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/qFNl5usUE7m\">Playground</a></p>\n<p>If a key doesn't exist in the map, retrieving its value return <code>zero value</code> of the <code>ValueType</code>. A two-value assignment can be used for checking the existence of the key:</p>\n<pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br><br>gValue<span class=\"token punctuation\">,</span> gExistence <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">]</span><br>kValue<span class=\"token punctuation\">,</span> kExistence <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">[</span><span class=\"token string\">\"k\"</span><span class=\"token punctuation\">]</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k=%d, exist: %t\\n\"</span><span class=\"token punctuation\">,</span> kValue<span class=\"token punctuation\">,</span> kExistence<span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g=%d, exist: %t\\n\"</span><span class=\"token punctuation\">,</span> gValue<span class=\"token punctuation\">,</span> gExistence<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/cnGBaaTR3pS\">Playground</a></p>\n<p>zero value is very useful for some cases. Below is a program to count the number of time appear in a string:</p>\n<pre class=\"language-go\"><code class=\"language-go\">s <span class=\"token operator\">:=</span> <span class=\"token string\">`Go provides a built-in map type that implements a hash table`</span><br><br>wordCount <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>words <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">FieldsFunc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> r <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span> <span class=\"token operator\">||</span> r <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> words <span class=\"token punctuation\">{</span><br>\twordCount<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><br><span class=\"token punctuation\">}</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>wordCount<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/5ATDAfHIyT0\">Playground</a></p>\n<p>Any <a href=\"https://golang.org/ref/spec#Comparison_operators\">comparable </a>type can be used as key of map. Below is an example of using struct as a key:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> country <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tname <span class=\"token builtin\">string</span><br>\tcode <span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span><br>visits <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>visits<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">{</span><span class=\"token string\">\"Vietnam\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><br>visits<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">{</span><span class=\"token string\">\"USA\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br><br>target <span class=\"token operator\">:=</span> country<span class=\"token punctuation\">{</span><span class=\"token string\">\"USA\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><br>visitTimes<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">:=</span> visits<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visited %5s: %5t, number of times: %d\\n\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> visitTimes<span class=\"token punctuation\">)</span><br><br>target <span class=\"token operator\">=</span> country<span class=\"token punctuation\">{</span><span class=\"token string\">\"India\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><br>visitTimes<span class=\"token punctuation\">,</span> visited <span class=\"token operator\">=</span> visits<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visited %5s: %5t, number of times: %d\\n\"</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">,</span> visitTimes<span class=\"token punctuation\">)</span></code></pre>\n<p><a href=\"https://go.dev/play/p/rwszyJdgdqW\">Playground</a></p>\n<p>map is not concurrency safe. A synchronization mechanism must be applied. <code>sync.RWMutex</code> can be used for synchronization.</p>\n<p>Below is a complex example where we create 100 lines of words and start a goroutine to count number of words appear in each lines:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>\t<span class=\"token string\">\"bytes\"</span><br>\t<span class=\"token string\">\"fmt\"</span><br>\t<span class=\"token string\">\"strings\"</span><br>\t<span class=\"token string\">\"sync\"</span><br><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">type</span> counter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><br>\tsync<span class=\"token punctuation\">.</span>RWMutex<br>\tcount <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>counter<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>w <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>\tc<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>counter<span class=\"token punctuation\">)</span> <span class=\"token function\">GetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span><br>\tc<span class=\"token punctuation\">.</span><span class=\"token function\">RLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">RUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>count<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>counter<span class=\"token punctuation\">)</span> <span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span>w <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> t <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\tc<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> t<br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">// create 100 lines</span><br>\tbuff <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\t\t\tbuff<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a b c \"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hard-code...</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\tbuff<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><br>\t\tbuff<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\ts <span class=\"token operator\">:=</span> buff<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token comment\">// for each lines, start a goroutine to count number of time a word appear.</span><br>\tlines <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">FieldsFunc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> r <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\tcounter <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>counter<span class=\"token punctuation\">{</span><br>\t\tcount<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup<br>\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> line <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> lines <span class=\"token punctuation\">{</span><br>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\tline <span class=\"token operator\">:=</span> line<br>\t\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\twords <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">FieldsFunc</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">return</span> r <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span> <span class=\"token operator\">||</span> r <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> w <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> words <span class=\"token punctuation\">{</span><br>\t\t\t\tcounter<span class=\"token punctuation\">.</span><span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// make sure all goroutine has been done.</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">GetAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://go.dev/play/p/GVHdTCWluLS\">Playground</a></p>\n<p>Read more about map in Go official blog: <a href=\"https://blog.golang.org/go-maps-in-action\">https://blog.golang.org/go-maps-in-action</a></p>\n<h2 id=\"questions\">Questions <a class=\"direct-link\" href=\"#questions\">#</a></h2>\n<p>Explain why you cannot take address of a map element?</p>\n<pre class=\"language-go\"><code class=\"language-go\">p <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token comment\">// cause panic</span></code></pre>\n",
      "date_published": "2019-09-24T07:00:00+07:00"
    },{
      "id": "https://thefortunedays.com/articles/working-with-array-in-go/",
      "url": "https://thefortunedays.com/articles/working-with-array-in-go/",
      "title": "Working with array in Go.",
      "content_html": "<p>Array in Go is just a data structure that hold a collection of elements of any type. Each element can be accessed by its index. Length of array is fixed at compile time and its size is a part of its type.</p>\n<p>The type [n]T is an array of n values of type T. It can be declared as full declaration statement or in a short-hand format, with or without init values.</p>\n<p>Array also can be declared in form of [...]T where its size will be determined by the compiler.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> holidays <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br>seasons <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Spring\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Summer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Autumn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Winter\"</span><span class=\"token punctuation\">}</span><br>weekDays <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><br>fruits <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"guava\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// type [3]string</span><br>visited <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><br>sudoku <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Size of array is a part of its type and it is determined at the compile time</strong></p>\n<p>That means you cannot extend its size at run-time and cannot assign it to another type at run-time:</p>\n<pre class=\"language-go\"><code class=\"language-go\">fruits <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"guava\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// type: [3]string</span><br>moreFruits <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"grapes\"</span><span class=\"token punctuation\">}</span>                 <span class=\"token comment\">// type: [4]string</span><br><br>moreFruits <span class=\"token operator\">=</span> fruits <span class=\"token comment\">// compile error</span></code></pre>\n<p><strong>Arrays are comparable if they have same type</strong></p>\n<pre class=\"language-go\"><code class=\"language-go\">firstArr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>    <span class=\"token comment\">// type: [3]int</span><br>secondArr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\">// type: [3]int</span><br>thirdArr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// type: [4]int</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>firstArr <span class=\"token operator\">==</span> secondArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>secondArr <span class=\"token operator\">==</span> thirdArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// compile error</span></code></pre>\n<p><strong>Each elements can be accessed by index or range over the array. Access index out of the array will cause a panic</strong></p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> weekDays <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sunday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Monday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Tuesday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Wednesday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Thursday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Friday\"</span><br>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Saturday\"</span><br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>weekDays<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Days in a week:\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> day <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> weekDays <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t%s\\n\"</span><span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// fmt.Println(weekDays[7]) // panic: index out of bound</span></code></pre>\n<p><strong>Passing an array to a method will create a copy of the original array</strong></p>\n<p>This means what you do with the copied array will not affect to the original array.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfruits <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">addGuava</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// doesn't change values of variable \"fruits\"</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">addGuava</span><span class=\"token punctuation\">(</span>fruits <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfruits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"guava\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/0gvmO5kI8Je\">Playground</a></p>\n<p>Passing the pointer of the array to a function if you want to change its value in that function:</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main<br><br><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfruits <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token function\">addGuava</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fruits<span class=\"token punctuation\">)</span> <span class=\"token comment\">// change value of variable  \"fruits\"</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">func</span> <span class=\"token function\">addGuava</span><span class=\"token punctuation\">(</span>fruits <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tfruits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"guava\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/r21hKN4XYtB\">Playground</a></p>\n<p><strong>Assign or range statement on an array will also create a copy of the original array</strong></p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br>newArr <span class=\"token operator\">:=</span> arr<br><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p != %p\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>newArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0xc000126000 != 0xc000126020</span></code></pre>\n<p><a href=\"https://play.golang.org/p/dKM5RnCZmx5\">Playground</a></p>\n<p>Interact with value of array while ranging over it will not affect the original value:</p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> arr <span class=\"token punctuation\">{</span><br>\tv <span class=\"token operator\">+=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// will not affect the original array values</span><br><span class=\"token punctuation\">}</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 1, 2, 3]</span></code></pre>\n<p><a href=\"https://play.golang.org/p/s-Kirtqypzc\">Playground</a></p>\n<p>If you want to change value of original array while ranging over it, use index instead:</p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span><br>\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><br><span class=\"token punctuation\">}</span><br>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [100 101 102 103]</span></code></pre>\n<p><a href=\"https://play.golang.org/p/pX-VH25RpKy\">Playground</a></p>\n<p><strong>Pointer of index and value inside range statement will be reused.</strong></p>\n<p>Notice that the pointers of <code>i</code> and <code>v</code> are the same in the result:</p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> arr <span class=\"token punctuation\">{</span><br>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%d, v=%d, &amp;i=%p, &amp;v: %p\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// i, v point to the same addresses for each iteration</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/nr9FGRWrm8g\">Playground</a></p>\n<p>This will cause a problem if you use goroutine inside the for loop as below. Notice that only the last element is printed.</p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> arr <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%d, v=%d, &amp;i=%p, &amp;v: %p\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/Xx4yyrkRR6q\">Playground</a></p>\n<p>Define local variable to avoid the variables are captured is one way to avoid the above problem:</p>\n<pre class=\"language-go\"><code class=\"language-go\">arr <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><br><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> arr <span class=\"token punctuation\">{</span><br>\ti<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> i<span class=\"token punctuation\">,</span> v<br>\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=%d, v=%d, &amp;i=%p, &amp;v: %p\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://play.golang.org/p/QBOXcLHNItH\">Playground</a></p>\n<p><strong>When do you use array?</strong></p>\n<p>Normally, array is used when the number of element is fixed at compile time. Example:</p>\n<ul>\n<li>Used in parsing network package where the length of the package is fixed. Example: TCP, UDP, DHCP, DNS packages, ...</li>\n<li>Used in hashing, encryption algorithms: MD5, Base64, Base58,...</li>\n<li>Represent a collection of fixed length elements like: days in a week, months in a year, ...</li>\n</ul>\n",
      "date_published": "2019-09-23T07:00:00+07:00"
    }
  ]
}
